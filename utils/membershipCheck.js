const { readJsonFile, writeJsonFile, USERS_FILE } = require('./memberUtils');

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {string} userID - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<Object>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 */
async function checkMembership(userID) {
    try {
        const users = readJsonFile(USERS_FILE, {});
        const user = users[userID];
        
        if (user && user.status === 'active') {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastActive ‡πÅ‡∏•‡∏∞ commandsUsed
            user.lastActive = new Date().toISOString();
            user.commandsUsed = (user.commandsUsed || 0) + 1;
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            writeJsonFile(USERS_FILE, users);
            
            return user;
        }
        
        return null;
    } catch (error) {
        console.error('Error checking membership:', error);
        return null;
    }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {string} userID - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<boolean>} - true ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
 */
async function checkAdminStatus(userID) {
    try {
        const users = readJsonFile(USERS_FILE, {});
        const user = users[userID];
        return user && user.isAdmin === true;
    } catch (error) {
        console.error('Error checking admin status:', error);
        return false;
    }
}

/**
 * ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 */
const EXEMPT_COMMANDS = [
    '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
    'register',
    'signup',
    '‡∏™‡∏°‡∏±‡∏Ñ‡∏£',
    '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
    '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
    'help',
    '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á',
    'commands'
];

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
 * @param {Object} api - Facebook Chat API
 * @param {Object} event - Event object
 * @param {string} commandName - ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô
 * @returns {Promise<boolean>} - true ‡∏´‡∏≤‡∏Å‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ
 */
async function validateMembershipBeforeCommand(api, event, commandName) {
    const { threadID, senderID, messageID } = event;
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô
    if (EXEMPT_COMMANDS.includes(commandName.toLowerCase())) {
        return true;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const memberData = await checkMembership(senderID);
    
    if (!memberData) {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        const notMemberMessage = 
            `üö´ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å!\n\n` +
            `üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó:\n` +
            `üëâ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n\n` +
            `‚ú® ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ü‡∏£‡∏µ! ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n` +
            `üéØ ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ`;
        
        api.sendMessage(notMemberMessage, threadID, messageID);
        return false;
    }
    
    return true;
}

/**
 * ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 * @returns {Promise<Object>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
 */
async function getMembershipStats() {
    try {
        const { readJsonFile, STATS_FILE } = require('./memberUtils');
        const stats = readJsonFile(STATS_FILE, { totalUsers: 0, registrationsToday: 0 });
        return stats;
    } catch (error) {
        console.error('Error getting membership stats:', error);
        return { totalUsers: 0, registrationsToday: 0 };
    }
}

/**
 * ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
 * @param {number} limit - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (default: 50)
 * @returns {Promise<Array>} - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 */
async function getAllMembers(limit = 50) {
    try {
        const users = readJsonFile(USERS_FILE, {});
        
        const members = Object.entries(users)
            .map(([userID, userData]) => ({
                userID,
                ...userData
            }))
            .filter(member => member.status === 'active')
            .sort((a, b) => new Date(b.registeredAt) - new Date(a.registeredAt))
            .slice(0, limit);
            
        return members;
    } catch (error) {
        console.error('Error getting all members:', error);
        return [];
    }
}

module.exports = {
    checkMembership,
    checkAdminStatus,
    validateMembershipBeforeCommand,
    getMembershipStats,
    getAllMembers,
    EXEMPT_COMMANDS
};
