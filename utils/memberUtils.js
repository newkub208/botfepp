const axios = require('axios');

// Firebase Database URL - ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ó‡∏ô JSON
const FIREBASE_URL = 'https://apikf-bbe63-default-rtdb.europe-west1.firebasedatabase.app';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function checkMemberStatus(userID) {
    try {
        const response = await axios.get(`${FIREBASE_URL}/users/${userID}.json`);
        if (response.data && response.data.status === 'active') {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            await updateLastActivity(userID);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error checking member status:', error);
        return false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
async function updateLastActivity(userID) {
    try {
        const updateData = {
            lastActive: new Date().toISOString()
        };
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        const userResponse = await axios.get(`${FIREBASE_URL}/users/${userID}.json`);
        if (userResponse.data) {
            updateData.commandsUsed = (userResponse.data.commandsUsed || 0) + 1;
        }
        
        await axios.patch(`${FIREBASE_URL}/users/${userID}.json`, updateData);
    } catch (error) {
        console.error('Error updating last activity:', error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
async function checkPermissionBeforeCommand(api, event, commandName) {
    const { senderID, threadID } = event;
    
    // ‡∏î‡∏∂‡∏á adminUID ‡∏à‡∏≤‡∏Å Firebase ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    let adminUID = null;
    try {
        const configResponse = await axios.get(`${FIREBASE_URL}/config.json`);
        adminUID = configResponse.data?.adminUID;
    } catch (error) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å getCurrentUserID
        try {
            adminUID = api.getCurrentUserID();
        } catch (err) {
            console.error('Cannot get admin UID:', err);
        }
    }
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (senderID === adminUID) {
        return true;
    }
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const exemptCommands = ['‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', 'register', '‡∏™‡∏°‡∏±‡∏Ñ‡∏£', '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'help', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'];
    if (exemptCommands.includes(commandName)) {
        return true;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const isMember = await checkMemberStatus(senderID);
    
    if (!isMember) {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        api.sendMessage(
            "üö´ ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n" +
            "üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:\n" +
            "‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n" +
            "‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠: /‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n\n" +
            "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ü‡∏£‡∏µ! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n" +
            "üéØ ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            threadID
        );
        return false;
    }
    
    return true;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function getMemberInfo(userID) {
    try {
        const response = await axios.get(`${FIREBASE_URL}/users/${userID}.json`);
        return response.data || null;
    } catch (error) {
        console.error('Error getting member info:', error);
        return null;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function getStats() {
    try {
        const [usersResponse, statsResponse] = await Promise.all([
            axios.get(`${FIREBASE_URL}/users.json`),
            axios.get(`${FIREBASE_URL}/stats.json`)
        ]);
        
        const users = usersResponse.data || {};
        const stats = statsResponse.data || {};
        
        const activeUsers = Object.values(users).filter(user => user.status === 'active').length;
        const totalUsers = Object.keys(users).length;
        
        return {
            totalUsers,
            activeUsers,
            registrationsToday: stats.registrationsToday || 0,
            ...stats
        };
    } catch (error) {
        console.error('Error getting stats:', error);
        return null;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡∏•‡∏á Firebase
async function saveConfigToFirebase(configData) {
    try {
        await axios.put(`${FIREBASE_URL}/config.json`, configData);
        return true;
    } catch (error) {
        console.error('Error saving config to Firebase:', error);
        return false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á config ‡∏à‡∏≤‡∏Å Firebase
async function getConfigFromFirebase() {
    try {
        const response = await axios.get(`${FIREBASE_URL}/config.json`);
        return response.data || {};
    } catch (error) {
        console.error('Error getting config from Firebase:', error);
        return {};
    }
}

module.exports = {
    checkMemberStatus,
    updateLastActivity,
    checkPermissionBeforeCommand,
    getMemberInfo,
    getStats,
    saveConfigToFirebase,
    getConfigFromFirebase,
    FIREBASE_URL
};
