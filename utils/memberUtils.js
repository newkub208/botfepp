const fs = require('fs');
const path = require('path');

// JSON file paths for local storage
const USERS_FILE = path.join(__dirname, '..', 'data', 'users.json');
const STATS_FILE = path.join(__dirname, '..', 'data', 'stats.json');
const CONFIG_FILE = path.join(__dirname, '..', 'data', 'config.json');

// Ensure data directory exists
const dataDir = path.dirname(USERS_FILE);
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
}

// Helper functions for JSON file operations
function readJsonFile(filePath, defaultData = {}) {
    try {
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            return JSON.parse(data);
        }
        return defaultData;
    } catch (error) {
        console.error(`Error reading JSON file ${filePath}:`, error);
        return defaultData;
    }
}

function writeJsonFile(filePath, data) {
    try {
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
        return true;
    } catch (error) {
        console.error(`Error writing JSON file ${filePath}:`, error);
        return false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function checkMemberStatus(userID) {
    try {
        const users = readJsonFile(USERS_FILE, {});
        const user = users[userID];
        
        if (user && user.status === 'active') {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            await updateLastActivity(userID);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error checking member status:', error);
        return false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
async function updateLastActivity(userID) {
    try {
        const users = readJsonFile(USERS_FILE, {});
        
        if (users[userID]) {
            users[userID].lastActive = new Date().toISOString();
            users[userID].commandsUsed = (users[userID].commandsUsed || 0) + 1;
            writeJsonFile(USERS_FILE, users);
        }
    } catch (error) {
        console.error('Error updating last activity:', error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
async function checkPermissionBeforeCommand(api, event, commandName) {
    const { senderID, threadID } = event;
    
    // ‡∏î‡∏∂‡∏á adminUID ‡∏à‡∏≤‡∏Å config file ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    let adminUID = null;
    try {
        const config = readJsonFile(CONFIG_FILE, {});
        adminUID = config.adminUID;
    } catch (error) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å config ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å getCurrentUserID
        try {
            adminUID = api.getCurrentUserID();
        } catch (err) {
            console.error('Cannot get admin UID:', err);
        }
    }
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (senderID === adminUID) {
        return true;
    }
    
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const exemptCommands = ['‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', 'register', '‡∏™‡∏°‡∏±‡∏Ñ‡∏£', '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'help', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'];
    if (exemptCommands.includes(commandName)) {
        return true;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const isMember = await checkMemberStatus(senderID);
    
    if (!isMember) {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        api.sendMessage(
            "üö´ ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n" +
            "üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:\n" +
            "‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n" +
            "‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠: /‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n\n" +
            "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ü‡∏£‡∏µ! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n" +
            "üéØ ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            threadID
        );
        return false;
    }
    
    return true;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function getMemberInfo(userID) {
    try {
        const users = readJsonFile(USERS_FILE, {});
        return users[userID] || null;
    } catch (error) {
        console.error('Error getting member info:', error);
        return null;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function getStats() {
    try {
        const users = readJsonFile(USERS_FILE, {});
        const stats = readJsonFile(STATS_FILE, {});
        
        const userList = Object.values(users);
        const activeUsers = userList.filter(user => user.status === 'active').length;
        const totalUsers = Object.keys(users).length;
        
        return {
            totalUsers,
            activeUsers,
            registrationsToday: stats.registrationsToday || 0,
            ...stats
        };
    } catch (error) {
        console.error('Error getting stats:', error);
        return null;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config
async function saveConfig(configData) {
    try {
        return writeJsonFile(CONFIG_FILE, configData);
    } catch (error) {
        console.error('Error saving config:', error);
        return false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á config
async function getConfig() {
    try {
        return readJsonFile(CONFIG_FILE, {});
    } catch (error) {
        console.error('Error getting config:', error);
        return {};
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
function addUser(userID, userData) {
    try {
        const users = readJsonFile(USERS_FILE, {});
        users[userID] = {
            ...userData,
            registeredAt: new Date().toISOString(),
            status: 'active',
            lastActive: new Date().toISOString(),
            commandsUsed: 0
        };
        return writeJsonFile(USERS_FILE, users);
    } catch (error) {
        console.error('Error adding user:', error);
        return false;
    }
}

module.exports = {
    checkMemberStatus,
    updateLastActivity,
    checkPermissionBeforeCommand,
    getMemberInfo,
    getStats,
    saveConfig,
    getConfig,
    addUser,
    readJsonFile,
    writeJsonFile,
    USERS_FILE,
    STATS_FILE,
    CONFIG_FILE
};
