// Utility functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö badword filter
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç deprecation warning ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

const fs = require('fs');
const path = require('path');

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà util.isArray ‡∏î‡πâ‡∏ß‡∏¢ Array.isArray ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ deprecation warning
if (typeof global !== 'undefined') {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç util.isArray deprecation
    const originalRequire = require;
    require = function(id) {
        const module = originalRequire.apply(this, arguments);
        if (id === 'util' && module.isArray) {
            // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà util.isArray ‡∏î‡πâ‡∏ß‡∏¢ Array.isArray
            module.isArray = Array.isArray;
        }
        return module;
    };
    Object.setPrototypeOf(require, originalRequire);
    Object.defineProperties(require, Object.getOwnPropertyDescriptors(originalRequire));
}

// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error codes
const ERROR_CODES = {
    1357031: {
        name: 'CONTENT_NOT_AVAILABLE',
        description: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß)',
        action: 'warn_only'
    },
    1357004: {
        name: 'INSUFFICIENT_PERMISSIONS',
        description: '‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
        action: 'request_admin'
    },
    1357047: {
        name: 'USER_NOT_IN_GROUP',
        description: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°',
        action: 'warn_only'
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error message
function getErrorMessage(error) {
    const errorInfo = ERROR_CODES[error.error];
    
    if (errorInfo) {
        switch (errorInfo.action) {
            case 'warn_only':
                return `‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û!\n\n` +
                       `${errorInfo.description}\n` +
                       `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ`;
                       
            case 'request_admin':
                return `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ\n\n` +
                       `${errorInfo.description}\n` +
                       `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó`;
                       
            default:
                return `‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û!\n\n` +
                       `${errorInfo.description}\n` +
                       `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ`;
        }
    }
    
    // Default error message
    return `‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û!\n\n` +
           `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ\n` +
           `(Error: ${error.errorSummary || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'})`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
async function checkBotPermissions(api, threadID) {
    try {
        const threadInfo = await api.getThreadInfo(threadID);
        const botID = api.getCurrentUserID();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isAdmin = threadInfo.adminIDs.some(admin => admin.id === botID);
        
        return {
            isAdmin,
            threadType: threadInfo.threadType,
            memberCount: threadInfo.participantIDs.length
        };
    } catch (error) {
        console.error('Error checking bot permissions:', error);
        return {
            isAdmin: false,
            threadType: 'unknown',
            memberCount: 0
        };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
async function safeRemoveUser(api, userID, threadID) {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô
        const permissions = await checkBotPermissions(api, threadID);
        
        if (!permissions.isAdmin) {
            throw {
                error: 1357004,
                errorSummary: 'Bot is not admin',
                errorDescription: 'Bot needs admin permission to remove users'
            };
        }
        
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        await api.removeUserFromGroup(userID, threadID);
        
        return {
            success: true,
            message: 'üö´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö\n\n‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û\n‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û'
        };
        
    } catch (error) {
        return {
            success: false,
            error: error,
            message: getErrorMessage(error)
        };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limiting
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
function logBadwordAction(action, userID, threadID, word = '') {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [BADWORD] ${action}: User ${userID} in Group ${threadID}${word ? ` (word: ${word})` : ''}`;
    
    console.log(logMessage);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå log (optional)
    try {
        const logPath = path.join(__dirname, '../../logs');
        if (!fs.existsSync(logPath)) {
            fs.mkdirSync(logPath, { recursive: true });
        }
        
        const logFile = path.join(logPath, 'badword.log');
        fs.appendFileSync(logFile, logMessage + '\n');
    } catch (error) {
        // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    }
}

module.exports = {
    ERROR_CODES,
    getErrorMessage,
    checkBotPermissions,
    safeRemoveUser,
    delay,
    logBadwordAction
};
