const axios = require('axios');

// Firebase Realtime Database URL
const FIREBASE_URL = 'https://apikf-bbe63-default-rtdb.europe-west1.firebasedatabase.app';

module.exports = {
    name: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
    description: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ)",
    nashPrefix: false,
    version: "1.0.0",
    role: "user",
    cooldowns: 10,
    aliases: ["register", "signup", "‡∏™‡∏°‡∏±‡∏Ñ‡∏£", "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"],
    
    async execute(api, event, args) {
        const { threadID, messageID, senderID } = event;
        
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const checkResponse = await axios.get(`${FIREBASE_URL}/users/${senderID}.json`);
            
            if (checkResponse.data) {
                const userData = checkResponse.data;
                const registeredDate = new Date(userData.registeredAt).toLocaleDateString('th-TH');
                
                return api.sendMessage(
                    `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß!\n\n` +
                    `üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${userData.name}\n` +
                    `üìÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${registeredDate}\n` +
                    `üîó User ID: ${senderID}\n\n` +
                    `üéâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`,
                    threadID, messageID
                );
            }
            
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Facebook
            const userInfo = await api.getUserInfo(senderID);
            const userName = userInfo[senderID]?.name || 'Unknown User';
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
            const newUserData = {
                name: userName,
                userID: senderID,
                registeredAt: new Date().toISOString(),
                status: 'active',
                lastActive: new Date().toISOString(),
                registeredFrom: threadID,
                commandsUsed: 0
            };
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firebase
            const registerResponse = await axios.put(`${FIREBASE_URL}/users/${senderID}.json`, newUserData);
            
            if (registerResponse.status === 200) {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
                try {
                    const statsResponse = await axios.get(`${FIREBASE_URL}/stats.json`);
                    const currentStats = statsResponse.data || { totalUsers: 0, registrationsToday: 0 };
                    
                    const today = new Date().toDateString();
                    const lastUpdate = currentStats.lastUpdate ? new Date(currentStats.lastUpdate).toDateString() : '';
                    
                    const newStats = {
                        totalUsers: (currentStats.totalUsers || 0) + 1,
                        registrationsToday: today === lastUpdate ? (currentStats.registrationsToday || 0) + 1 : 1,
                        lastUpdate: new Date().toISOString()
                    };
                    
                    await axios.put(`${FIREBASE_URL}/stats.json`, newStats);
                } catch (statsError) {
                    console.error('Error updating stats:', statsError);
                }
                
                return api.sendMessage(
                    `üéâ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n` +
                    `üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${userName}\n` +
                    `üîó User ID: ${senderID}\n` +
                    `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${new Date().toLocaleDateString('th-TH')}\n\n` +
                    `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!\n` +
                    `üîß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`,
                    threadID, messageID
                );
            } else {
                throw new Error('Failed to register user');
            }
            
        } catch (error) {
            console.error('Registration error:', error);
            
            if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
                return api.sendMessage(
                    `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ\n\n` +
                    `üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á\n` +
                    `üìû ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö`,
                    threadID, messageID
                );
            }
            
            return api.sendMessage(
                `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n\n` +
                `Error: ${error.message}\n` +
                `üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
                threadID, messageID
            );
        }
    }
};
