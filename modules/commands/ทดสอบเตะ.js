const newMemberMonitor = require('../events/newMemberMonitor.js');

module.exports = {
  name: "‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
  aliases: ["testkick", "testautokick"],
  description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤)",
  version: "1.0.0",
  nashPrefix: false,
  cooldowns: 5,

  async execute(api, event, args, prefix) {
    const { threadID, messageID, senderID } = event;

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      const threadInfo = await api.getThreadInfo(threadID);
      const adminIDs = threadInfo.adminIDs.map(admin => admin.id);
      const specialUserID = "61574221880222"; // ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡πÄ‡∏®‡∏©

      if (!adminIDs.includes(senderID) && senderID !== specialUserID) {
        return api.sendMessage("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", threadID, messageID);
      }

      const command = args[0]?.toLowerCase();

      if (!command) {
        const helpMessage = `üß™ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà

üî∏ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:
‚Ä¢ ${prefix}‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞ ‡πÄ‡∏û‡∏¥‡πà‡∏° @user - ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‚Ä¢ ${prefix}‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞ ‡∏•‡∏ö @user - ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠
‚Ä¢ ${prefix}‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞ ‡πÄ‡∏ß‡∏•‡∏≤ @user 1 - ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
‚Ä¢ ${prefix}‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞ ‡∏ï‡∏£‡∏ß‡∏à - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`;

        return api.sendMessage(helpMessage, threadID, messageID);
      }

      const mentions = Object.keys(event.mentions || {});

      switch (command) {
        case "‡πÄ‡∏û‡∏¥‡πà‡∏°":
        case "add":
          if (mentions.length === 0) {
            return api.sendMessage("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö", threadID, messageID);
          }

          for (const userID of mentions) {
            const memberKey = `${threadID}_${userID}`;
            const userInfo = await api.getUserInfo(userID);
            const userName = userInfo[userID]?.name || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö';

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
            newMemberMonitor.newMembersData = newMemberMonitor.newMembersData || new Map();
            newMemberMonitor.newMembersData.set(memberKey, {
              userID: userID,
              threadID: threadID,
              userName: userName,
              joinTime: Date.now()
            });

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (typeof newMemberMonitor.saveNewMembersData === 'function') {
              newMemberMonitor.saveNewMembersData();
            }
          }

          return api.sendMessage(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${mentions.length} ‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß`, threadID, messageID);

        case "‡∏•‡∏ö":
        case "remove":
          if (mentions.length === 0) {
            return api.sendMessage("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", threadID, messageID);
          }

          let removedCount = 0;
          for (const userID of mentions) {
            const memberKey = `${threadID}_${userID}`;
            if (newMemberMonitor.newMembersData && newMemberMonitor.newMembersData.has(memberKey)) {
              newMemberMonitor.newMembersData.delete(memberKey);
              removedCount++;
            }
          }

          if (typeof newMemberMonitor.saveNewMembersData === 'function') {
            newMemberMonitor.saveNewMembersData();
          }

          return api.sendMessage(`‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${removedCount} ‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`, threadID, messageID);

        case "‡πÄ‡∏ß‡∏•‡∏≤":
        case "time":
          if (mentions.length === 0 || !args[2]) {
            return api.sendMessage("‚ùå ‡πÉ‡∏ä‡πâ: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡∏∞ ‡πÄ‡∏ß‡∏•‡∏≤ @user [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ]", threadID, messageID);
          }

          const minutes = parseInt(args[2]);
          if (isNaN(minutes) || minutes < 0) {
            return api.sendMessage("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0", threadID, messageID);
          }

          for (const userID of mentions) {
            const memberKey = `${threadID}_${userID}`;
            if (newMemberMonitor.newMembersData && newMemberMonitor.newMembersData.has(memberKey)) {
              const memberData = newMemberMonitor.newMembersData.get(memberKey);
              // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
              memberData.joinTime = Date.now() - (10 * 60 * 1000) + (minutes * 60 * 1000);
              newMemberMonitor.newMembersData.set(memberKey, memberData);
            }
          }

          if (typeof newMemberMonitor.saveNewMembersData === 'function') {
            newMemberMonitor.saveNewMembersData();
          }

          return api.sendMessage(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏Å‡πÅ‡∏•‡πâ‡∏ß`, threadID, messageID);

        case "‡∏ï‡∏£‡∏ß‡∏à":
        case "check":
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          if (typeof newMemberMonitor.checkExpiredMembers === 'function') {
            await newMemberMonitor.checkExpiredMembers(api);
            return api.sendMessage("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", threadID, messageID);
          } else {
            return api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ", threadID, messageID);
          }

        default:
          return api.sendMessage("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", threadID, messageID);
      }

    } catch (error) {
      console.error('Error in test auto kick command:', error);
      return api.sendMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö", threadID, messageID);
    }
  }
};
