const fs = require('fs');
const path = require('path');
const { updateKickCount, loadDetailedAdmins, checkTemporaryAdminPermission, cleanExpiredAdmins } = require('../../utils/adminManager');

// --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
const SUPER_ADMIN_ID = '61555184860915';
const ADMIN_FILE_PATH = path.join(__dirname, '../../admin_list.json');

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---
function loadAdmins() {
    try {
        if (fs.existsSync(ADMIN_FILE_PATH)) {
            const data = fs.readFileSync(ADMIN_FILE_PATH, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Error loading admin list:', error);
    }
    return [];
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---
function hasAdminPermission(senderID) {
    console.log(`[KICK] Checking admin permission for ${senderID}`);
    
    if (senderID === SUPER_ADMIN_ID) {
        console.log(`[KICK] ${senderID} is super admin`);
        return { isAdmin: true, isTemporary: false };
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô
    cleanExpiredAdmins();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const tempAdminCheck = checkTemporaryAdminPermission(senderID);
    console.log(`[KICK] Temporary admin check for ${senderID}: ${tempAdminCheck}`);
    
    if (tempAdminCheck) {
        console.log(`[KICK] ${senderID} is temporary admin`);
        return { isAdmin: true, isTemporary: true };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    const admins = loadAdmins();
    const isRegularAdmin = admins.includes(senderID);
    console.log(`[KICK] Regular admin check for ${senderID}: ${isRegularAdmin}`);
    
    return { isAdmin: isRegularAdmin, isTemporary: false };
}

module.exports = {
  name: "kick",
  description: "‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
  version: "2.0.0",
  aliases: ["kick", "remove"],
  nashPrefix: false,
  cooldowns: 5,

  async execute(api, event, args, prefix) {
    const { threadID, messageID, senderID, mentions, type, messageReply } = event;

    try {
      // --- 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---
      const threadInfo = await api.getThreadInfo(threadID);
      const groupAdminIDs = threadInfo.adminIDs.map(admin => admin.id);

      // --- 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ---
      const adminCheck = hasAdminPermission(senderID);
      const isGroupAdmin = groupAdminIDs.includes(senderID);
      
      if (!adminCheck.isAdmin && !isGroupAdmin) {
        return api.sendMessage("‚ùå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!\n‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ï‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å", threadID, messageID);
      }

      // --- 2.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ---
      if (adminCheck.isTemporary) {
        console.log(`[KICK] Checking temporary admin limits for ${senderID}`);
        const detailedData = loadDetailedAdmins();
        const admin = detailedData.temporaryAdmins[senderID];
        
        if (!admin) {
          console.log(`[KICK] No temporary admin data found for ${senderID}`);
          return api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", threadID, messageID);
        }
        
        console.log(`[KICK] Admin data:`, admin);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        const now = new Date();
        const expireTime = new Date(admin.expiresAt);
        if (now >= expireTime) {
          console.log(`[KICK] Admin ${senderID} expired`);
          return api.sendMessage(
            `‚ùå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß!\n` +
            `üìÖ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${expireTime.toLocaleString('th-TH')}`,
            threadID, 
            messageID
          );
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞
        if (admin.kickCount >= (admin.maxKicks || 5)) {
          console.log(`[KICK] Admin ${senderID} reached kick limit: ${admin.kickCount}/${admin.maxKicks}`);
          return api.sendMessage(
            `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!\n` +
            `üìä ‡πÄ‡∏ï‡∏∞‡πÅ‡∏•‡πâ‡∏ß: ${admin.kickCount}/${admin.maxKicks || 5} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
            `‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`,
            threadID, 
            messageID
          );
        }
      }

      // --- 3. ‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏∞ ---
      let targetID = "";
      if (type === "message_reply") {
        targetID = messageReply.senderID;
      } else if (Object.keys(mentions).length > 0) {
        targetID = Object.keys(mentions)[0];
      } else {
        return api.sendMessage(
          `üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n` +
          `‚Ä¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞\n` +
          `‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞\n\n` +
          `‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ`,
          threadID, 
          messageID
        );
      }
      
      // --- 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏© ---
      if (targetID === api.getCurrentUserID()) {
        return api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏ö‡∏≠‡∏ó) ‡πÑ‡∏î‡πâ", threadID, messageID);
      }
      
      if (groupAdminIDs.includes(targetID)) {
        return api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ", threadID, messageID);
      }

      if (targetID === SUPER_ADMIN_ID) {
        return api.sendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ", threadID, messageID);
      }

      // --- 5. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏∞ ---
      let targetName = `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ UID: ${targetID}`;
      try {
        const userInfo = await api.getUserInfo(targetID);
        targetName = userInfo[targetID]?.name || targetName;
      } catch (e) {
        // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      }

      // --- 6. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ---
      await api.removeUserFromGroup(targetID, threadID);

      // --- 7. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) ---
      let kickMessage = `‚úÖ ‡πÄ‡∏ï‡∏∞ "${targetName}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`;
      
      if (adminCheck.isAdmin && adminCheck.isTemporary) {
        console.log(`[KICK] Updating kick count for temporary admin ${senderID}`);
        const kickResult = updateKickCount(senderID);
        console.log(`[KICK] Kick result:`, kickResult);
        
        if (kickResult) {
          if (kickResult.removed) {
            kickMessage += `\n\nüö´ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!\n` +
                          `üìç ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${kickResult.reason}\n` +
                          `‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ï‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß`;
            
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ Super Admin
            try {
              await api.sendMessage(
                `‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (${senderID}) ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n` +
                `üìç ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${kickResult.reason}\n` +
                `üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${kickResult.maxKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                `üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`,
                SUPER_ADMIN_ID
              );
            } catch (e) {
              console.log('Failed to notify super admin:', e);
            }
          } else {
            kickMessage += `\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n` +
                          `‚Ä¢ ‡πÄ‡∏ï‡∏∞‡πÅ‡∏•‡πâ‡∏ß: ${kickResult.kickCount}/${kickResult.maxKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                          `‚Ä¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${kickResult.remaining} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                          `‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏£‡∏ö ${kickResult.maxKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`;
          }
        } else {
          console.log(`[KICK] Warning: No kick result returned for ${senderID}`);
        }
      }

      api.sendMessage(kickMessage, threadID, messageID);

    } catch (err) {
      console.error("Kick command error:", err);
      api.sendMessage(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ\n` +
        `üîß ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${err.message}\n` +
        `üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà`,
        threadID, 
        messageID
      );
    }
  }
};
