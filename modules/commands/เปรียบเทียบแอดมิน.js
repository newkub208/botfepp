const { loadDetailedAdmins } = require('../../utils/adminManager');
const fs = require('fs');
const path = require('path');

// --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
const SUPER_ADMIN_ID = '61555184860915';
const ADMIN_FILE_PATH = path.join(__dirname, '../../admin_list.json');

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---
function loadAdmins() {
    try {
        if (fs.existsSync(ADMIN_FILE_PATH)) {
            const data = fs.readFileSync(ADMIN_FILE_PATH, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Error loading admin list:', error);
    }
    return [];
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ---
function hasPermission(senderID) {
    const admins = loadAdmins();
    return senderID === SUPER_ADMIN_ID || admins.includes(senderID);
}

module.exports = {
    name: "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
    description: "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    version: "1.0.0",
    aliases: ["compareadmin", "‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"],
    nashPrefix: false,
    cooldowns: 3,

    async execute(api, event, args, prefix) {
        const { threadID, messageID, senderID } = event;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if (!hasPermission(senderID)) {
            return api.sendMessage("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", threadID, messageID);
        }

        try {
            const detailedData = loadDetailedAdmins();
            const now = new Date();

            // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            const activeAdmins = [];
            for (const adminId in detailedData.temporaryAdmins) {
                const admin = detailedData.temporaryAdmins[adminId];
                if (admin.isActive && new Date(admin.expiresAt) > now) {
                    activeAdmins.push({
                        adminId,
                        ...admin,
                        maxKicks: admin.maxKicks || 5,
                        remainingKicks: (admin.maxKicks || 5) - admin.kickCount,
                        usagePercent: ((admin.kickCount / (admin.maxKicks || 5)) * 100),
                        daysLeft: Math.ceil((new Date(admin.expiresAt) - now) / (1000 * 60 * 60 * 24))
                    });
                }
            }

            if (activeAdmins.length === 0) {
                return api.sendMessage(
                    `‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà\n\n` +
                    `üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${prefix}‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà`,
                    threadID,
                    messageID
                );
            }

            let message = `üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n`;
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
            const totalMaxKicks = activeAdmins.reduce((sum, admin) => sum + admin.maxKicks, 0);
            const totalUsedKicks = activeAdmins.reduce((sum, admin) => sum + admin.kickCount, 0);
            const totalRemainingKicks = activeAdmins.reduce((sum, admin) => sum + admin.remainingKicks, 0);
            const avgUsagePercent = activeAdmins.reduce((sum, admin) => sum + admin.usagePercent, 0) / activeAdmins.length;

            message += `üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:\n`;
            message += `‚Ä¢ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${activeAdmins.length} ‡∏Ñ‡∏ô\n`;
            message += `‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${totalMaxKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n`;
            message += `‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${totalUsedKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n`;
            message += `‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${totalRemainingKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n`;
            message += `‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${avgUsagePercent.toFixed(1)}%\n\n`;

            // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            const sortType = args[0]?.toLowerCase() || "kicks";

            if (sortType === "time" || sortType === "‡πÄ‡∏ß‡∏•‡∏≤") {
                message += `‚è∞ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ô‡πâ‡∏≠‡∏¢ ‚Üí ‡∏°‡∏≤‡∏Å):\n`;
                activeAdmins.sort((a, b) => a.daysLeft - b.daysLeft);
            } else if (sortType === "usage" || sortType === "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô") {
                message += `üìä ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢):\n`;
                activeAdmins.sort((a, b) => b.usagePercent - a.usagePercent);
            } else {
                message += `üö´ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞ (‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢):\n`;
                activeAdmins.sort((a, b) => b.maxKicks - a.maxKicks);
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
            for (let i = 0; i < activeAdmins.length; i++) {
                const admin = activeAdmins[i];
                
                // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                let userName = `UID: ${admin.adminId}`;
                try {
                    const userInfo = await api.getUserInfo(admin.adminId);
                    userName = userInfo[admin.adminId]?.name || userName;
                } catch (e) {
                    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                }

                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
                let rankEmoji = "";
                if (i === 0) rankEmoji = "ü•á";
                else if (i === 1) rankEmoji = "ü•à";
                else if (i === 2) rankEmoji = "ü•â";
                else rankEmoji = `${i + 1}.`;

                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                let statusEmoji = "";
                if (admin.usagePercent >= 80) statusEmoji = "üî¥"; // ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
                else if (admin.usagePercent >= 60) statusEmoji = "üü°"; // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                else statusEmoji = "üü¢"; // ‡∏õ‡∏Å‡∏ï‡∏¥

                message += `${rankEmoji} ${statusEmoji} ${userName}\n`;
                message += `   ‚îî‚îÄ‚îÄ ‡πÄ‡∏ï‡∏∞: ${admin.kickCount}/${admin.maxKicks} (${admin.usagePercent.toFixed(1)}%)\n`;
                message += `   ‚îî‚îÄ‚îÄ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${admin.remainingKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á | ${admin.daysLeft} ‡∏ß‡∏±‡∏ô\n`;
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                if (admin.usagePercent >= 80 || admin.daysLeft <= 1) {
                    message += `   ‚îî‚îÄ‚îÄ ‚ö†Ô∏è `;
                    if (admin.usagePercent >= 80) message += `‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î `;
                    if (admin.daysLeft <= 1) message += `‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î`;
                    message += `\n`;
                }
                
                message += `\n`;
            }

            // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
            message += `üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n`;

            // ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î
            const highUsageAdmins = activeAdmins.filter(admin => admin.usagePercent >= 70);
            if (highUsageAdmins.length > 0) {
                message += `‚Ä¢ ‡∏°‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${highUsageAdmins.length} ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î\n`;
            }

            // ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î
            const lowTimeAdmins = activeAdmins.filter(admin => admin.daysLeft <= 3);
            if (lowTimeAdmins.length > 0) {
                message += `‚Ä¢ ‡∏°‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${lowTimeAdmins.length} ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î\n`;
            }

            // ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ï‡∏∞‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å
            const maxKicksValues = activeAdmins.map(admin => admin.maxKicks);
            const minMaxKicks = Math.min(...maxKicksValues);
            const maxMaxKicks = Math.max(...maxKicksValues);
            
            if (maxMaxKicks - minMaxKicks > 5) {
                message += `‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å (${minMaxKicks}-${maxMaxKicks} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)\n`;
            }

            message += `\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:\n`;
            message += `‚Ä¢ ${prefix}‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô - ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞\n`;
            message += `‚Ä¢ ${prefix}‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n`;
            message += `‚Ä¢ ${prefix}‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\n`;
            message += `üìÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}`;

            api.sendMessage(message, threadID, messageID);

        } catch (error) {
            console.error('Compare admin command error:', error);
            api.sendMessage(
                `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n` +
                `üîß Error: ${error.message}`,
                threadID,
                messageID
            );
        }
    }
};
