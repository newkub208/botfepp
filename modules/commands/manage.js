const { getMemberInfo, getStats, FIREBASE_URL } = require('../../utils/memberUtils');
const axios = require('axios');

module.exports = {
    name: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
    description: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)",
    nashPrefix: true,
    version: "1.0.0",
    role: "admin",
    cooldowns: 3,
    aliases: ["manage", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", "admin"],
    
    async execute(api, event, args) {
        const { threadID, messageID, senderID } = event;
        
        if (args.length === 0) {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
            const stats = await getStats();
            
            let message = "üëë ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n";
            message += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
            
            if (stats) {
                message += `üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö:\n`;
                message += `‚Ä¢ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalUsers} ‡∏Ñ‡∏ô\n`;
                message += `‚Ä¢ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${stats.activeUsers} ‡∏Ñ‡∏ô\n`;
                message += `‚Ä¢ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${stats.registrationsToday} ‡∏Ñ‡∏ô\n\n`;
            }
            
            message += "üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n";
            message += "‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• [userID] - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n";
            message += "‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏£‡∏∞‡∏á‡∏±‡∏ö [userID] - ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n";
            message += "‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö [userID] - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö\n";
            message += "‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏•‡∏ö [userID] - ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n";
            message += "‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ - ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n";
            message += "‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î";
            
            return api.sendMessage(message, threadID, messageID);
        }
        
        const action = args[0].toLowerCase();
        const targetUserID = args[1];
        
        switch (action) {
            case '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•':
            case 'info':
                if (!targetUserID) {
                    return api.sendMessage(
                        "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ User ID\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1234567890",
                        threadID, messageID
                    );
                }
                
                const memberInfo = await getMemberInfo(targetUserID);
                if (!memberInfo) {
                    return api.sendMessage(
                        `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${targetUserID}`,
                        threadID, messageID
                    );
                }
                
                const registeredDate = new Date(memberInfo.registeredAt).toLocaleString('th-TH');
                const lastActiveDate = memberInfo.lastActive ? new Date(memberInfo.lastActive).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                
                let infoMessage = `üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n`;
                infoMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
                infoMessage += `üìù ‡∏ä‡∏∑‡πà‡∏≠: ${memberInfo.name}\n`;
                infoMessage += `üÜî User ID: ${memberInfo.userID}\n`;
                infoMessage += `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${memberInfo.status === 'active' ? 'üü¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : 'üî¥ ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö'}\n`;
                infoMessage += `üìÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${registeredDate}\n`;
                infoMessage += `‚è∞ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastActiveDate}\n`;
                infoMessage += `üî¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${memberInfo.commandsUsed || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n`;
                infoMessage += `üìç ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°: ${memberInfo.registeredFrom || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}`;
                
                return api.sendMessage(infoMessage, threadID, messageID);
                
            case '‡∏£‡∏∞‡∏á‡∏±‡∏ö':
            case 'suspend':
            case 'ban':
                if (!targetUserID) {
                    return api.sendMessage(
                        "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ User ID\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏£‡∏∞‡∏á‡∏±‡∏ö 1234567890",
                        threadID, messageID
                    );
                }
                
                try {
                    const updateData = {
                        status: 'suspended',
                        suspendedAt: new Date().toISOString(),
                        suspendedBy: senderID
                    };
                    
                    await axios.patch(`${FIREBASE_URL}/users/${targetUserID}.json`, updateData);
                    
                    return api.sendMessage(
                        `‚úÖ ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${targetUserID} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n` +
                        "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏î‡πÜ ‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö",
                        threadID, messageID
                    );
                } catch (error) {
                    return api.sendMessage(
                        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${error.message}`,
                        threadID, messageID
                    );
                }
                
            case '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö':
            case 'unsuspend':
            case 'unban':
                if (!targetUserID) {
                    return api.sendMessage(
                        "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ User ID\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö 1234567890",
                        threadID, messageID
                    );
                }
                
                try {
                    const updateData = {
                        status: 'active',
                        unsuspendedAt: new Date().toISOString(),
                        unsuspendedBy: senderID
                    };
                    
                    await axios.patch(`${FIREBASE_URL}/users/${targetUserID}.json`, updateData);
                    
                    return api.sendMessage(
                        `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${targetUserID} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n` +
                        "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                        threadID, messageID
                    );
                } catch (error) {
                    return api.sendMessage(
                        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö: ${error.message}`,
                        threadID, messageID
                    );
                }
                
            case '‡∏•‡∏ö':
            case 'delete':
            case 'remove':
                if (!targetUserID) {
                    return api.sendMessage(
                        "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ User ID\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏•‡∏ö 1234567890",
                        threadID, messageID
                    );
                }
                
                try {
                    await axios.delete(`${FIREBASE_URL}/users/${targetUserID}.json`);
                    
                    return api.sendMessage(
                        `‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${targetUserID} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n` +
                        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                        threadID, messageID
                    );
                } catch (error) {
                    return api.sendMessage(
                        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${error.message}`,
                        threadID, messageID
                    );
                }
                
            case '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥':
            case 'stats':
                const detailedStats = await getStats();
                if (!detailedStats) {
                    return api.sendMessage(
                        "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ",
                        threadID, messageID
                    );
                }
                
                let statsMessage = `üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n`;
                statsMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
                statsMessage += `üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${detailedStats.totalUsers} ‡∏Ñ‡∏ô\n`;
                statsMessage += `üü¢ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${detailedStats.activeUsers} ‡∏Ñ‡∏ô\n`;
                statsMessage += `üî¥ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö: ${detailedStats.totalUsers - detailedStats.activeUsers} ‡∏Ñ‡∏ô\n`;
                statsMessage += `üìÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${detailedStats.registrationsToday} ‡∏Ñ‡∏ô\n`;
                statsMessage += `‚è∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${detailedStats.lastUpdate ? new Date(detailedStats.lastUpdate).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}`;
                
                return api.sendMessage(statsMessage, threadID, messageID);
                
            case '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠':
            case 'list':
                try {
                    const usersResponse = await axios.get(`${FIREBASE_URL}/users.json`);
                    const users = usersResponse.data || {};
                    
                    if (Object.keys(users).length === 0) {
                        return api.sendMessage(
                            "üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                            threadID, messageID
                        );
                    }
                    
                    const userList = Object.values(users)
                        .sort((a, b) => new Date(b.registeredAt) - new Date(a.registeredAt))
                        .slice(0, 10); // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏Ñ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    
                    let listMessage = `üìù ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (${userList.length}/${Object.keys(users).length})\n`;
                    listMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
                    
                    userList.forEach((user, index) => {
                        const status = user.status === 'active' ? 'üü¢' : 'üî¥';
                        const date = new Date(user.registeredAt).toLocaleDateString('th-TH');
                        listMessage += `${index + 1}. ${status} ${user.name}\n`;
                        listMessage += `   ID: ${user.userID} | ${date}\n\n`;
                    });
                    
                    if (Object.keys(users).length > 10) {
                        listMessage += `... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${Object.keys(users).length - 10} ‡∏Ñ‡∏ô`;
                    }
                    
                    return api.sendMessage(listMessage, threadID, messageID);
                } catch (error) {
                    return api.sendMessage(
                        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠: ${error.message}`,
                        threadID, messageID
                    );
                }
                
            default:
                return api.sendMessage(
                    "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡πÉ‡∏ä‡πâ: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏£‡∏∞‡∏á‡∏±‡∏ö/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö/‡∏•‡∏ö/‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥/‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠]",
                    threadID, messageID
                );
        }
    }
};
