const fs = require("fs");
const path = require("path");
const { spawn, execSync } = require("child_process");
const axios = require("axios");
const { sendMessageWithAttachment, isFileReadable } = require("../../utils/messageUtils");

// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ---
const CACHE_DIR = path.join(__dirname, "cache");
if (!fs.existsSync(CACHE_DIR)) {
  fs.mkdirSync(CACHE_DIR, { recursive: true });
}

// --- ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô ---
const runningBots = new Map();
const BOT_LIFETIME_MS = 15 * 60 * 1000; // 15 ‡∏ô‡∏≤‡∏ó‡∏µ

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏≠‡∏ó, ‡∏£‡∏±‡∏ô, ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {object} api - Object ‡∏Ç‡∏≠‡∏á API ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 * @param {object} event - Object ‡∏Ç‡∏≠‡∏á Event ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
 * @param {string} botToken - Token ‡∏Ç‡∏≠‡∏á Telegram Bot
 * @param {string} userPrompt - ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó
 * @param {string} prefix - Prefix ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
 */
async function buildAndRunBot(api, event, botToken, userPrompt, prefix) {
  const startTime = Date.now();
  const { threadID, messageID, senderID } = event;
  let waitingMessage = null;

  try {
    waitingMessage = await api.sendMessage(
      "ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI...",
      threadID
    );

    // --- STEP 1: ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ ---
    if (runningBots.has(senderID)) {
      const oldBot = runningBots.get(senderID);
      clearTimeout(oldBot.timerId);

      const timeElapsed = Date.now() - oldBot.createdAt;
      
      let stopMessage = "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...";
      if (timeElapsed < BOT_LIFETIME_MS) {
          stopMessage = "‚è≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...";
      }
      
      await api.editMessage(stopMessage, waitingMessage.messageID);
      
      // [FIX] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏î‡∏Å‡∏∏‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏Å‡πà‡∏≤
      await new Promise((resolve) => {
        const pid = oldBot.process.pid;
        let resolved = false;

        const onExit = () => {
            if (!resolved) {
                console.log(`[INFO] Confirmed exit for old bot process PID: ${pid}.`);
                resolved = true;
                resolve();
            }
        };
        oldBot.process.on('exit', onExit);

        console.log(`[INFO] Kill signal (SIGTERM) sent to old bot PID: ${pid}. Waiting for graceful exit...`);
        oldBot.process.kill('SIGTERM'); 
        runningBots.delete(senderID);

        setTimeout(() => {
            if (!resolved) {
                console.warn(`[WARN] Old bot PID: ${pid} did not exit gracefully. Sending SIGKILL.`);
                try {
                    process.kill(pid, 'SIGKILL');
                } catch (e) {
                    // Ignore error if process is already gone
                }
                resolved = true;
                resolve();
            }
        }, 4000); // ‡∏£‡∏≠ 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      });
    }

    // --- STEP 2: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Prompt ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI ---
    await api.editMessage("üöÄ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ô‡∏£‡∏°‡∏¥‡∏ï‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏≠‡∏ó Telegram...", waitingMessage.messageID);
    
    const fullPrompt = `
      You are an expert in creating Telegram bots using Node.js.
      Your task is to generate a complete, single-file Node.js code for a Telegram bot using the 'node-telegram-bot-api' library.
      The code must follow these strict rules:
      1. Directly embed the following TOKEN into the code: '${botToken}'
      2. The code must be ready to run immediately with 'node <filename>.js', assuming 'node-telegram-bot-api' is already installed.
      3. Your response MUST be only the raw code.
      4. Your response MUST start with "const TelegramBot = require('node-telegram-bot-api');".
      5. Do NOT include any markdown like \`\`\`javascript, explanations, comments, or any other text outside of the code itself.
      The main idea for the bot is: "${userPrompt}"
    `;
    
    const newApiUrl = 'https://bots.easy-peasy.ai/bot/9bc091b4-8477-4844-8b53-a354244f53e8/api';
    const newApiKey = '5528a40e-e4cc-4414-bb01-995f43a55949';

    const response = await axios.post(newApiUrl, {
      "message": fullPrompt,
      "history": [],
      "stream": false,
      "include_sources": false
    }, {
      headers: {
        'content-type': 'application/json',
        'x-api-key': newApiKey
      },
      timeout: 180000
    });

    console.log("[DEBUG] New AI Response:", JSON.stringify(response.data, null, 2));

    let generatedCode = response.data.bot.text;

    if (!generatedCode || typeof generatedCode !== "string" || !generatedCode.includes("node-telegram-bot-api")) {
      throw new Error("AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response.data.bot.text)");
    }

    // --- STEP 3: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ---
    await api.editMessage("‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô...", waitingMessage.messageID);
    try {
        execSync('npm install node-telegram-bot-api', { stdio: 'inherit' });
        console.log('[INFO] Dependency "node-telegram-bot-api" is installed or already present.');
    } catch (installError) {
        console.error('[ERROR] Failed to install dependency:', installError);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ "node-telegram-bot-api" ‡πÑ‡∏î‡πâ');
    }
    
    const shutdownHandler = `
\n// --- Graceful Shutdown Handler ---
process.on('SIGTERM', () => {
  console.log('SIGTERM signal received: closing Telegram bot polling.');
  bot.stopPolling({ cancel: true }).then(() => {
    console.log('Telegram bot polling stopped. Exiting process.');
    process.exit(0);
  }).catch(err => {
    console.error('Error stopping polling:', err);
    process.exit(1);
  });
});
`;
    generatedCode += shutdownHandler;
    
    await api.editMessage("‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...", waitingMessage.messageID);
    const fileName = `telegram_bot_${senderID}_${Date.now()}.js`;
    const filePath = path.join(CACHE_DIR, fileName);
    fs.writeFileSync(filePath, generatedCode);

    let botStderr = '';
    const botProcess = spawn('node', [filePath], { detached: true, stdio: ['ignore', 'pipe', 'pipe'] });
    botProcess.unref();

    botProcess.stderr.on('data', (data) => {
        console.error(`[BOT STDERR ${botProcess.pid}]: ${data}`);
        botStderr += data.toString();
    });

    botProcess.on('exit', (code) => {
      console.log(`[INFO] Bot process for user ${senderID} (PID: ${botProcess.pid}) exited with code ${code}.`);
      const botInfo = runningBots.get(senderID);

      if (code !== 0 && botInfo) {
          const timeAlive = Date.now() - botInfo.createdAt;
          if (timeAlive < 10000) { 
              const errorMessage = `üî¥ ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏∞‡∏ó‡∏±‡∏ô‡∏´‡∏±‡∏ô (exit code: ${code}).\n‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô\n\n**Error Log:**\n\`\`\`\n${botStderr || 'No specific error message was captured.'}\n\`\`\``;
              api.sendMessage(errorMessage, threadID);
          }
      }

      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`[CLEANUP] Deleted bot file: ${filePath}`);
      }
      if (botInfo && botInfo.process.pid === botProcess.pid) {
        clearTimeout(botInfo.timerId);
        runningBots.delete(senderID);
      }
    });

    botProcess.on('error', (err) => {
      console.error(`[ERROR] Failed to start or run bot process for user ${senderID}:`, err);
      if (runningBots.has(senderID) && runningBots.get(senderID).process.pid === botProcess.pid) {
        runningBots.delete(senderID);
      }
    });

    const autoStopTimer = setTimeout(() => {
        if (runningBots.has(senderID) && runningBots.get(senderID).process.pid === botProcess.pid) {
            botProcess.kill('SIGTERM');
            console.log(`[AUTO-STOP] Bot for user ${senderID} (PID: ${botProcess.pid}) stopped after 15 minutes.`);
            api.sendMessage(`‚è∞ ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: "${userPrompt.substring(0, 30)}..." ‡πÑ‡∏î‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î 15 ‡∏ô‡∏≤‡∏ó‡∏µ`, threadID);
        }
    }, BOT_LIFETIME_MS);

    runningBots.set(senderID, { 
        process: botProcess, 
        filePath: filePath,
        createdAt: Date.now(),
        timerId: autoStopTimer 
    });
    console.log(`[INFO] Started bot for user ${senderID} with PID: ${botProcess.pid}. Auto-stop scheduled in 15 mins.`);

    // --- STEP 4: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå ---
    const durationInSeconds = ((Date.now() - startTime) / 1000).toFixed(1);
    const body = `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà...\n\nüí¨ ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: ${userPrompt}\n‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${durationInSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\n‚è∞ ‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n\`${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó stop\`\n\n(‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π)`;

    await new Promise(resolve => setTimeout(resolve, 1500)); 

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    if (!fs.existsSync(filePath)) {
      console.warn(`[WARN] Bot file was deleted before sending: ${filePath}`);
      return api.sendMessage(body, threadID, messageID);
    }

    // ‡πÉ‡∏ä‡πâ utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
    try {
      await sendMessageWithAttachment(api, body, threadID, messageID, filePath);
    } catch (attachmentError) {
      console.error("[ERROR] Failed to send message with attachment, sending text only:", attachmentError);
      // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      await api.sendMessage(body, threadID, messageID);
    }

  } catch (e) {
    console.error(e);
    let errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó\n‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${e.message}`;
    if (e.response) errorMessage += ` (Status: ${e.response.status})`;
    await api.sendMessage(errorMessage, threadID, messageID);
  } finally {
    if (waitingMessage && waitingMessage.messageID) {
      api.unsendMessage(waitingMessage.messageID);
    }
  }
}

// --- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å ---
module.exports = {
  name: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó",
  description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏≠‡∏ó Telegram ‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AI (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ)",
  version: "4.0.0", // Update version with robust shutdown
  aliases: ["createbot", "tgbot", "telebot"],
  nashPrefix: false,
  cooldowns: 60,

  async execute(api, event, args, prefix) {
    const { threadID, messageID, senderID } = event;

    if (args[0] && args[0].toLowerCase() === 'stop') {
      if (runningBots.has(senderID)) {
        const botToStop = runningBots.get(senderID);
        clearTimeout(botToStop.timerId);
        botToStop.process.kill('SIGTERM');
        runningBots.delete(senderID);
        return api.sendMessage("‚úÖ ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", threadID, messageID);
      } else {
        return api.sendMessage("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", threadID, messageID);
      }
    }

    const fullArgs = args.join(' ');
    const tokenRegex = /(\d{8,10}:[a-zA-Z0-9_-]{35})/;
    const tokenMatch = fullArgs.match(tokenRegex);

    if (!tokenMatch) {
      return api.sendMessage(
        `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏Ç‡∏≠‡∏á Telegram ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á!\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ Token ‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó 123456:ABC-DEF ‡∏ö‡∏≠‡∏ó‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏û‡∏π‡∏î`,
        threadID,
        messageID
      );
    }

    const botToken = tokenMatch[0];
    const userPrompt = fullArgs.replace(tokenRegex, '').replace(/\s+/g, ' ').trim();

    if (!userPrompt) {
      return api.sendMessage(
        `üìù ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó ${botToken} ‡∏ö‡∏≠‡∏ó‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏û‡∏π‡∏î`,
        threadID,
        messageID
      );
    }

    return buildAndRunBot(api, event, botToken, userPrompt, prefix);
  },
};
