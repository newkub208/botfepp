const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports = {
  name: "‡∏û‡∏π‡∏î",
  description: "‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ",
  nashPrefix: false,
  version: "1.0.1",
  cooldowns: 15,
  aliases: ["speech", "say", "talk", "tts", "‡∏≠‡πà‡∏≤‡∏ô"],
  async execute(api, event, args, prefix) {
    const { threadID, messageID } = event;

    if (args.length === 0) {
      const example = `„Äê ùó°ùóîùó¶ùóõ „Äë ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á üó£Ô∏è
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üé§ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á:
Alloy | Ash | Ballad | Coral | Echo | Fable | Onyx | Nova | Sage | Shimmer | Verse

üé≠ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå:
Santa | True Crime Buff | Old-Timey | Robot | Eternal Optimist | Patient Teacher | Calm | NYC Cabbie | Dramatic

üìå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
${prefix}‡∏û‡∏π‡∏î Ash | Calm | ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
      return api.sendMessage(example, threadID, messageID);
    }

    const input = args.join(" ").split("|").map(i => i.trim());
    if (input.length < 3) {
      return api.sendMessage(`‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡πÉ‡∏ä‡πâ: ${prefix}‡∏û‡∏π‡∏î <‡πÄ‡∏™‡∏µ‡∏¢‡∏á> | <‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå> | <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>`, threadID, messageID);
    }

    const [voice, vibe, ...textArr] = input;
    const text = textArr.join(" ");

    api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...", threadID, async (err, info) => {
      try {
        const url = `https://zen-api.gleeze.com/api/openai-speech?text=${encodeURIComponent(text)}&voice=${encodeURIComponent(voice)}&vibe=${encodeURIComponent(vibe)}`;
        const res = await axios.get(url);
        const audioUrl = res.data.audio;

        if (!res.data.status || !audioUrl) throw new Error("Failed to generate speech.");

        const tempDir = path.join(__dirname, "temp");
        if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);
        const filePath = path.join(tempDir, `speech_${Date.now()}.mp3`);
        const writer = fs.createWriteStream(filePath);

        const audioRes = await axios({
          method: "GET",
          url: audioUrl,
          responseType: "stream",
        });

        audioRes.data.pipe(writer);
        await new Promise((resolve, reject) => {
          writer.on("finish", resolve);
          writer.on("error", reject);
        });

        api.editMessage("üì§ Sending audio...", info.messageID);
        const stream = fs.createReadStream(filePath);

        api.sendMessage({ attachment: stream }, threadID, () => {
          fs.unlinkSync(filePath);
          api.unsendMessage(info.messageID);
        });

      } catch (error) {
        console.error("Speech Error:", error.message);
        api.editMessage("‚ùå Error: " + error.message, info.messageID);
      }
    }, messageID);
  }
};