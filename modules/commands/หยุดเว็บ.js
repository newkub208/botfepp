const { exec } = require('child_process');
const webServerManager = require('../../utils/webServerManager');

module.exports = {
  name: '‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡πá‡∏ö',
  description: '‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï 6666',
  usage: '[nashPrefix]‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡πá‡∏ö',
  nashPrefix: true,
  aliases: ['stopweb', 'webstop'],
  execute: async (api, event, args, prefix) => {
    const { threadID, messageID, senderID } = event;

    const serverKey = `${threadID}_${senderID}`;

    // Try to stop server using the manager first
    if (webServerManager.hasServer(serverKey)) {
      const success = webServerManager.removeServer(serverKey);
      if (success) {
        await api.sendMessage(
          '‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n' +
          'ÔøΩ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n' +
          'üåê ‡∏û‡∏≠‡∏£‡πå‡∏ï 6666: ‡∏ß‡πà‡∏≤‡∏á\n\n' +
          'üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/‡∏£‡∏±‡∏ô‡πÄ‡∏ß‡πá‡∏ö [pastebin_url]` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà',
          threadID, messageID
        );
        return;
      }
    }

    await api.sendMessage('ÔøΩüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ß‡πá‡∏ö...', threadID, messageID);

    try {
      // Find and kill processes using port 6666 as fallback
      exec('lsof -ti:6666', (error, stdout, stderr) => {
        if (error || !stdout.trim()) {
          api.sendMessage(
            'üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï 6666\n' +
            '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏à‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
            threadID, messageID
          );
          return;
        }

        const pids = stdout.trim().split('\n');
        let killedCount = 0;
        const totalPids = pids.filter(p => p).length;

        pids.forEach(pid => {
          if (pid) {
            exec(`kill -9 ${pid}`, (killError) => {
              if (!killError) {
                killedCount++;
              }
              
              // Check if all processes have been handled
              if (killedCount > 0 && killedCount === totalPids) {
                api.sendMessage(
                  '‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n' +
                  'üî¥ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n' +
                  'üåê ‡∏û‡∏≠‡∏£‡πå‡∏ï 6666: ‡∏ß‡πà‡∏≤‡∏á\n\n' +
                  'üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/‡∏£‡∏±‡∏ô‡πÄ‡∏ß‡πá‡∏ö [pastebin_url]` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà',
                  threadID
                );
              } else if (killedCount === 0 && totalPids === 1) {
                api.sendMessage(
                  '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n' +
                  '‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏≠‡∏∑‡πà‡∏ô',
                  threadID
                );
              }
            });
          }
        });
      });

    } catch (error) {
      console.error('Error stopping web server:', error);
      await api.sendMessage(
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${error.message}`,
        threadID, messageID
      );
    }
  }
};
