const axios = require("axios");
// [FIXED] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ import ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö jimp ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
const { Jimp } = require("jimp"); 
const QrCode = require("qrcode-reader");

module.exports = {
  name: "‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå",
  description: "‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å QR Code ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PromptPay, Wallet, ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£, WiFi, URL)",
  version: "2.4.0", // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Wallet ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
  aliases: ["readqr", "qrscan", "‡∏≠‡πà‡∏≤‡∏ôqr"],
  nashPrefix: false,
  cooldowns: 5,

  async execute(api, event, args, prefix) {
    const { threadID, messageID, type, messageReply } = event;

    // --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
    if (type !== "message_reply") {
      return api.sendMessage(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏π‡∏õ QR Code ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        threadID,
        messageID
      );
    }

    // --- 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
    if (!messageReply || !messageReply.attachments || messageReply.attachments.length === 0) {
      return api.sendMessage(
        "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏π‡∏õ QR Code",
        threadID,
        messageID
      );
    }

    // --- 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ---
    const imageAttachment = messageReply.attachments.find(att => att.type === "photo");

    if (!imageAttachment) {
      return api.sendMessage(
        "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        threadID,
        messageID
      );
    }

    const imageUrl = imageAttachment.url;
    const waitingMessage = await api.sendMessage("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô QR Code...", threadID);

    try {
      // --- 4. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Buffer ---
      const imageBuffer = (await axios.get(imageUrl, { responseType: 'arraybuffer' })).data;
      
      // --- 5. [ENHANCED] ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ---
      let image = await Jimp.read(imageBuffer);
      
      // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
      image = image
        .greyscale() // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
        .contrast(0.5) // ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
        .normalize(); // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
      
      // ‡∏´‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î
      if (image.bitmap.width < 300 || image.bitmap.height < 300) {
        image = image.resize(600, 600);
      }

      const qr = new QrCode();

      // ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≤‡∏á‡πÜ
      let decodedText = null;
      const attempts = [
        image, // ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
        image.clone().brightness(0.2), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
        image.clone().brightness(-0.2), // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
        image.clone().contrast(0.8), // ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        image.clone().invert(), // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏µ (‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥)
        image.clone().blur(1).contrast(1.0), // ‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
        image.clone().resize(800, 800), // ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        image.clone().threshold({ max: 200, replace: 255, autoGreyscale: false }), // threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏ã‡πà‡∏≠‡∏ô
        image.clone().posterize(2) // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2 ‡∏™‡∏µ (‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥)
      ];

      for (let i = 0; i < attempts.length; i++) {
        try {
          decodedText = await new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
              reject(new Error("Timeout"));
            }, 5000); // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

            qr.callback = (err, value) => {
              clearTimeout(timeout);
              if (err || !value) {
                reject(new Error("Cannot decode"));
              } else {
                resolve(value.result);
              }
            };
            qr.decode(attempts[i].bitmap);
          });
          console.log(`‚úÖ QR Code ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${i + 1}`);
          break; // ‡∏´‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏π‡∏õ
        } catch (err) {
          console.log(`‚ùå ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${i + 1} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message}`);
          if (i === attempts.length - 1) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
          }
          continue; // ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        }
      }

      // --- 6. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
      let formattedResult = decodedText;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ
      if (decodedText.includes("promptpay") || decodedText.includes("00020101")) {
        formattedResult = `üí∞ **PromptPay QR Code**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("truemoney") || decodedText.includes("tmn://") || decodedText.includes("truewallet")) {
        formattedResult = `üíô **TrueMoney Wallet**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("shopeepay") || decodedText.includes("spay://") || decodedText.toLowerCase().includes("shopee")) {
        formattedResult = `üß° **ShopeePay**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("rabbit") || decodedText.includes("rabbitlinepay") || decodedText.includes("linepay")) {
        formattedResult = `üê∞ **Rabbit LINE Pay**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("scb") || decodedText.includes("scbeasy") || decodedText.toLowerCase().includes("siam")) {
        formattedResult = `üíú **SCB Easy**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("kplus") || decodedText.includes("kasikorn") || decodedText.includes("kbank")) {
        formattedResult = `üíö **K PLUS**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("bbl") || decodedText.includes("bangkok") || decodedText.includes("bualuang")) {
        formattedResult = `üîµ **Bualuang mBanking**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("ktb") || decodedText.includes("krungthai") || decodedText.includes("next")) {
        formattedResult = `üü° **Krungthai NEXT**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("paotang") || decodedText.includes("‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏á") || decodedText.includes("paotung")) {
        formattedResult = `üèõÔ∏è **‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏á**\n\nüì± ${decodedText}`;
      } else if (decodedText.includes("wallet") || decodedText.includes("pay://") || decodedText.includes("payment")) {
        formattedResult = `üí≥ **Digital Wallet**\n\nüì± ${decodedText}`;
      } else if (decodedText.startsWith("http") || decodedText.startsWith("https")) {
        formattedResult = `üåê **Website**\n\nüîó ${decodedText}`;
      } else if (decodedText.includes("wifi:") || decodedText.includes("WIFI:")) {
        formattedResult = `üì∂ **WiFi**\n\nüì° ${decodedText}`;
      } else if (decodedText.includes("tel:") || /^\+?\d{10,}$/.test(decodedText)) {
        formattedResult = `üìû **‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£**\n\n‚òéÔ∏è ${decodedText.replace("tel:", "")}`;
      } else if (decodedText.includes("@")) {
        formattedResult = `üìß **‡∏≠‡∏µ‡πÄ‡∏°‡∏•**\n\n‚úâÔ∏è ${decodedText}`;
      } else if (/^\d+$/.test(decodedText) && decodedText.length >= 10) {
        formattedResult = `üî¢ **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç/‡∏£‡∏´‡∏±‡∏™**\n\nüÜî ${decodedText}`;
      }

      api.sendMessage(
        `‚úÖ ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÑ‡∏î‡πâ:\n\n${formattedResult}`,
        threadID,
        messageID
      );

    } catch (err) {
      console.error("‚ùå QR Code Reader Error:", err.message);
      api.sendMessage(`‚ùå ${err.message}`, threadID, messageID);
    } finally {
        api.unsendMessage(waitingMessage.messageID);
    }
  }
};

