const axios = require("axios");
const express = require("express");
const fs = require("fs");
const path = require("path");

// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå ---
const PAGE_DIR = path.join(__dirname, "..", "..", "pages");
if (!fs.existsSync(PAGE_DIR)) {
  fs.mkdirSync(PAGE_DIR, { recursive: true });
}

const CACHE_DIR = path.join(__dirname, "cache");
if (!fs.existsSync(CACHE_DIR)) {
  fs.mkdirSync(CACHE_DIR, { recursive: true });
}

const STATE_FILE = path.join(__dirname, "..", "..", "state.json");
let state = {};
try {
  state = JSON.parse(fs.readFileSync(STATE_FILE, "utf8"));
} catch {
  state = {};
}

// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ---
if (!global.__webServerStarted) {
  const app = express();
  app.use("/pages", express.static(PAGE_DIR));
  const PORT = 5000;
  const HOST = "http://menu.panelaimbot.com";
  
  app.listen(PORT, () => console.log(`üåê HTML server is running at: ${HOST}:${PORT}/pages`));
  global.__webServerStarted = true;
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
const slugify = t =>
  t.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "").substring(0, 50);

const randomWords = [
  'aurora', 'breeze', 'comet', 'dream', 'echo', 'forest', 'galaxy',
  'harmony', 'island', 'journey', 'karma', 'lagoon', 'meadow', 'nebula',
  'ocean', 'peak', 'quest', 'river', 'serene', 'tundra', 'umbra',
  'vortex', 'willow', 'xenon', 'yonder', 'zephyr', 'pixel', 'lotus',
  'ember', 'frost', 'glen', 'haven', 'ivory', 'jade'
];

function generateRandomFilename() {
  const word = randomWords[Math.floor(Math.random() * randomWords.length)];
  const shortName = word.substring(0, 5);
  return shortName + '.html';
}


const timeouts = {};
Object.entries(state).forEach(([stateKey, rec]) => scheduleExpiry(stateKey, rec));

function scheduleExpiry(stateKey, rec) {
  if (!rec || !rec.expiresAt) return;
  const msLeft = rec.expiresAt - Date.now();
  if (msLeft <= 0) {
    return deletePage(stateKey);
  }
  timeouts[stateKey] = setTimeout(() => deletePage(stateKey), msLeft);
}

function deletePage(stateKey) {
  const rec = state[stateKey];
  if (!rec || typeof rec.filename !== 'string') {
    if (state[stateKey]) {
        delete state[stateKey];
        fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
    }
    return;
  }

  const fp = path.join(PAGE_DIR, rec.filename);
  try {
    if (fs.existsSync(fp)) {
      fs.unlinkSync(fp);
      console.log(`üóëÔ∏è Deleted page: ${rec.filename}`);
    }
    delete state[stateKey];
    fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
    clearTimeout(timeouts[stateKey]);
  } catch (err) {
    console.error(`Failed to delete page ${rec.filename}:`, err);
  }
}

// --- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å ---
module.exports = {
  name: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö",
  description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏à‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢ AI Gemini Flash 2.0 + ‡∏à‡∏î‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ + ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î + ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î",
  version: "8.1.0", // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  aliases: ["createweb", "webai", "htmlai", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö", "viewcode", "‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "edit", "list"],
  nashPrefix: false,
  cooldowns: 30,

  async execute(api, event, args, prefix) {
    const { threadID, messageID, senderID, type, messageReply } = event;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î
    if (args.length > 0 && (args[0].toLowerCase() === 'viewcode' || args[0] === '‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î')) {
      return await this.handleViewCode(api, event, args.slice(1));
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    if (args.length > 0 && (args[0].toLowerCase() === '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' || args[0].toLowerCase() === 'list' || args[0].toLowerCase() === '‡∏•‡∏¥‡∏™‡∏ï‡πå')) {
      return await this.handleListDetails(api, event);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    if (args.length > 0 && (args[0].toLowerCase() === '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' || args[0].toLowerCase() === 'edit')) {
      return await this.handleEdit(api, event, args.slice(1));
    }
    
    let inputArgs = [...args];
    let prompt = "";
    let minutes = 5; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    let imageUrl = null;
    let statePrompt = "";

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Reply ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if (type === "message_reply" && messageReply.attachments && messageReply.attachments.some(att => att.type === "photo")) {
        const photoAttachment = messageReply.attachments.find(att => att.type === "photo");
        imageUrl = photoAttachment.url;
        prompt = inputArgs.join(" ").trim();
        statePrompt = prompt || `image-${photoAttachment.ID}`;
        console.log(`[INFO] Image URL from reply: ${imageUrl}`);
    } else {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const urlRegex = /(https?:\/\/[^\s]+)/;
        const urlArg = inputArgs.find(arg => urlRegex.test(arg) && (arg.includes('.jpg') || arg.includes('.png') || arg.includes('.jpeg')));
        if (urlArg) {
            imageUrl = urlArg;
            inputArgs = inputArgs.filter(arg => arg !== urlArg);
            console.log(`[INFO] Image URL from argument: ${imageUrl}`);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
        if (inputArgs.length > 0) {
            const lastArg = inputArgs[inputArgs.length - 1];
            const potentialMinutes = parseInt(lastArg, 10);
            if (!isNaN(potentialMinutes) && potentialMinutes >= 1 && potentialMinutes <= 60) {
                minutes = potentialMinutes;
                inputArgs.pop(); // ‡πÄ‡∏≠‡∏≤‡∏ô‡∏≤‡∏ó‡∏µ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å arguments
            }
        }
        prompt = inputArgs.join(" ").trim();
        statePrompt = prompt || imageUrl;
    }

    if (!prompt && !imageUrl) {
      return api.sendMessage(
        `üìù ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ Reply ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û\n\n` +
        `ü§ñ ‡πÉ‡∏ä‡πâ Gemini Flash 2.0 (‡∏à‡∏î‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤)\n\n` +
        `üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ:\n` +
        `üî∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ 15\n` +
        `üî∏ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n` +
        `üî∏ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡πá‡∏ö: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå\n` +
        `üî∏ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î all\n\n` +
        `‚ö° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà:\n- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡πÑ‡∏î‡πâ\n- ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n- ‡∏à‡∏î‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤\n- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û\n\n` +
        `(‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πâ 1-60 ‡∏ô‡∏≤‡∏ó‡∏µ)`,
        threadID,
        messageID
      );
    }

    const stateKey = slugify(statePrompt);
    const existingState = state[stateKey];

    if (existingState && existingState.filename) {
      let existingMessage = `‚úèÔ∏è ‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô ${Math.ceil((existingState.expiresAt - Date.now()) / 60000)} ‡∏ô‡∏≤‡∏ó‡∏µ)\n`;
      
      if (existingState.pastebinUrl) {
        existingMessage += `üìÑ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°: ${existingState.pastebinUrl}\n`;
      }
      
      existingMessage += `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡∏ö...`;
      
      await api.sendMessage(existingMessage, threadID, messageID);
      return buildPage(api, event, prompt, minutes, true, stateKey, existingState.filename, imageUrl);
    }
    
    let newFilename = generateRandomFilename();
    while (Object.values(state).some(rec => rec && rec.filename === newFilename)) {
        newFilename = generateRandomFilename();
    }
    return buildPage(api, event, prompt, minutes, false, stateKey, newFilename, imageUrl);
  },

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
  async handleViewCode(api, event, args) {
    const { threadID, messageID } = event;
    
    if (args.length === 0) {
      return api.sendMessage(
        `üìã ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î:\n\n` +
        `üî∏ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î all\n` +
        `üî∏ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î <‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á>\n\n` +
        `‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n- ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î all\n- ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î ‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ`,
        threadID,
        messageID
      );
    }

    const query = args.join(" ").trim().toLowerCase();
    
    if (query === "all" || query === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const activePages = Object.entries(state).filter(([key, rec]) => 
        rec && rec.filename && rec.pastebinUrl
      );
      
      if (activePages.length === 0) {
        return api.sendMessage(
          `üìÑ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`,
          threadID,
          messageID
        );
      }
      
      let message = `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ (${activePages.length} ‡πÄ‡∏ß‡πá‡∏ö):\n\n`;
      
      activePages.forEach(([key, rec], index) => {
        const minutesLeft = Math.ceil((rec.expiresAt - Date.now()) / 60000);
        const createdTime = new Date(rec.createdAt || Date.now()).toLocaleString('th-TH');
        message += `${index + 1}. üåê ${key.replace(/-/g, ' ')}\n`;
        message += `   üìÑ ‡πÇ‡∏Ñ‡πâ‡∏î: ${rec.pastebinUrl}\n`;
        message += `   ‚è∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ\n`;
        message += `   üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${createdTime}\n\n`;
      });
      
      return api.sendMessage(message, threadID, messageID);
    } else {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢
      const searchKey = slugify(query);
      const foundState = state[searchKey];
      
      if (!foundState || !foundState.pastebinUrl) {
        return api.sendMessage(
          `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ "${query}"\n\n` +
          `üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`,
          threadID,
          messageID
        );
      }
      
      const minutesLeft = Math.ceil((foundState.expiresAt - Date.now()) / 60000);
      const HOST = "http://menu.panelaimbot.com:5000";
      const pageUrl = `${HOST}/pages/${foundState.filename}`;
      
      return api.sendMessage(
        `üìÑ ‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: "${query}"\n\n` +
        `üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ß‡πá‡∏ö: ${pageUrl}\n` +
        `üìÑ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î: ${foundState.pastebinUrl}\n` +
        `‚è∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ`,
        threadID,
        messageID
      );
    }
  },

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
  async handleListDetails(api, event) {
    const { threadID, messageID } = event;
    
    const activePages = Object.entries(state).filter(([key, rec]) => 
      rec && rec.filename
    );
    
    if (activePages.length === 0) {
      return api.sendMessage(
        `üìÑ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ\n\n` +
        `üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö <‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢>`,
        threadID,
        messageID
      );
    }
    
    let message = `üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ (${activePages.length} ‡πÄ‡∏ß‡πá‡∏ö):\n\n`;
    
    activePages.forEach(([key, rec], index) => {
      const minutesLeft = Math.ceil((rec.expiresAt - Date.now()) / 60000);
      const createdTime = new Date(rec.createdAt || Date.now()).toLocaleString('th-TH');
      const HOST = "http://menu.panelaimbot.com:5000";
      const pageUrl = `${HOST}/pages/${rec.filename}`;
      
      message += `${index + 1}. üåê **${key.replace(/-/g, ' ')}**\n`;
      message += `   üìÅ ‡πÑ‡∏ü‡∏•‡πå: ${rec.filename}\n`;
      message += `   üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${pageUrl}\n`;
      if (rec.pastebinUrl) {
        message += `   üìÑ ‡πÇ‡∏Ñ‡πâ‡∏î: ${rec.pastebinUrl}\n`;
      }
      message += `   ‚è∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${minutesLeft > 0 ? minutesLeft + ' ‡∏ô‡∏≤‡∏ó‡∏µ' : '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß'}\n`;
      message += `   üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${createdTime}\n`;
      message += `   ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${rec.filename}\n\n`;
    });
    
    message += `üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n`;
    message += `üî∏ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡πá‡∏ö: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå>\n`;
    message += `üî∏ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î <‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå>`;
    
    return api.sendMessage(message, threadID, messageID);
  },

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î
  async handleEdit(api, event, args) {
    const { threadID, messageID, senderID } = event;
    
    if (args.length === 0) {
      return api.sendMessage(
        `üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n\n` +
        `‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç dream.html\n\n` +
        `üí° ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`,
        threadID,
        messageID
      );
    }
    
    const filename = args[0];
    
    // ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠
    const foundState = Object.entries(state).find(([key, rec]) => 
      rec && rec.filename === filename
    );
    
    if (!foundState) {
      return api.sendMessage(
        `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå "${filename}"\n\n` +
        `üí° ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`,
        threadID,
        messageID
      );
    }
    
    const [stateKey, rec] = foundState;
    
    // ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏≠‡∏∞‡πÑ‡∏£
    const editMessage = await api.sendMessage(
      `‚úèÔ∏è ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filename}\n\n` +
      `üîß ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£?\n` +
      `üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô:\n` +
      `- "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ü‡πâ‡∏≤"\n` +
      `- "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"\n` +
      `- "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô"\n` +
      `- "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå animation"\n\n` +
      `‚è∞ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö... (timeout 2 ‡∏ô‡∏≤‡∏ó‡∏µ)`,
      threadID,
      messageID
    );
    
    // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    const filter = (response) => response.senderID === senderID && response.threadID === threadID;
    
    try {
      const collected = await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('timeout'));
        }, 120000); // 2 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        const messageListener = (response) => {
          if (filter(response)) {
            clearTimeout(timeout);
            api.removeListener('message', messageListener);
            resolve(response);
          }
        };
        
        api.on('message', messageListener);
      });
      
      const editRequest = collected.body;
      
      if (!editRequest || editRequest.trim().length === 0) {
        return api.sendMessage("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", threadID, messageID);
      }
      
      // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      return await this.performEdit(api, event, stateKey, rec, editRequest);
      
    } catch (error) {
      if (error.message === 'timeout') {
        return api.sendMessage("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", threadID, messageID);
      }
      throw error;
    }
  },

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  async performEdit(api, event, stateKey, rec, editRequest) {
    const { threadID, messageID, senderID } = event;
    const fp = path.join(PAGE_DIR, rec.filename);
    const HOST = "http://menu.panelaimbot.com:5000";
    
    let waitingMessage = await api.sendMessage("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...", threadID);
    
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
      if (!fs.existsSync(fp)) {
        throw new Error("‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
      }
      
      const existingHtml = fs.readFileSync(fp, 'utf8');
      
      await api.editMessage("ü§ñ Gemini Flash 2.0 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î...", waitingMessage.messageID);
      
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      const editPrompt = `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠: "${editRequest}"

‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°:
${existingHtml}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ <!DOCTYPE html> ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà markdown ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏°‡∏≤`;

      const apiKey = "e62d60dd-8853-4233-bbcb-9466b4cbc265";
      const newApiUrl = `https://kaiz-apis.gleeze.com/api/gemini-flash-2.0?q=${encodeURIComponent(editPrompt)}&uid=${senderID}&imageUrl=&apikey=${apiKey}`;
      
      const apiResponse = await axios.get(newApiUrl, {
        timeout: 180000,
        headers: { 'Accept-Encoding': 'gzip, deflate' }
      });
      
      if (apiResponse.status !== 200 || (apiResponse.data && apiResponse.data.error)) {
        const errorMsg = apiResponse.data.error || `API returned status ${apiResponse.status}`;
        throw new Error(`API Error: ${errorMsg}`);
      }

      const answer = apiResponse.data.response;
      
      if (!answer || typeof answer !== 'string') {
        throw new Error("Gemini Flash 2.0 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤");
      }
      
      // ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
      let editedHtml = null;
      
      const patterns = [
        /```(?:html)?\s*([\s\S]+?)```/,
        /```\s*(<!DOCTYPE[\s\S]+?)```/,
        /```\s*(<html[\s\S]+?)```/,
      ];
      
      let found = false;
      for (const pattern of patterns) {
        const match = answer.match(pattern);
        if (match && match[1]) {
          editedHtml = match[1].trim();
          found = true;
          break;
        }
      }
      
      if (!found) {
        editedHtml = answer.trim();
      }
      
      if (!editedHtml || typeof editedHtml !== 'string') {
        throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ");
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
      if (!/^<!DOCTYPE html|<html[\s>]/i.test(editedHtml)) {
        editedHtml = `<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edited Web</title>
</head>
<body>
    ${editedHtml}
</body>
</html>`;
      }
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
      fs.writeFileSync(fp, editedHtml);
      
      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ Pastebin
      await api.editMessage("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß...", waitingMessage.messageID);
      const pastebinTitle = `Edited Web Code - ${editRequest.substring(0, 30)}`;
      const pastebinUrl = await uploadToPastebin(editedHtml, pastebinTitle);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
      state[stateKey].pastebinUrl = pastebinUrl || state[stateKey].pastebinUrl;
      state[stateKey].lastEdited = Date.now();
      state[stateKey].editHistory = state[stateKey].editHistory || [];
      state[stateKey].editHistory.push({
        request: editRequest,
        timestamp: Date.now(),
        pastebinUrl: pastebinUrl
      });
      fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
      
      const pageUrl = `${HOST}/pages/${rec.filename}`;
      
      let successMessage = `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n`;
      successMessage += `üìù ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${editRequest}\n`;
      successMessage += `üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${pageUrl}\n`;
      if (pastebinUrl) {
        successMessage += `üìÑ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà: ${pastebinUrl}\n`;
      }
      successMessage += `‚è∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${Math.ceil((rec.expiresAt - Date.now()) / 60000)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
      
      await api.sendMessage(successMessage, threadID, messageID);
      
    } catch (error) {
      console.error('[EDIT ERROR]', error);
      let errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${error.message}`;
      
      if (error.response) {
        errorMessage += ` (Status: ${error.response.status})`;
      }
      
      await api.sendMessage(errorMessage, threadID, messageID);
    } finally {
      if (waitingMessage && waitingMessage.messageID) {
        api.unsendMessage(waitingMessage.messageID);
      }
    }
  }
};

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Prompt ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö) ---
async function buildPage(api, event, userPrompt, minutes, isUpdate, stateKey, filename, imageUrl = null) {
    const startTime = Date.now();
    const { senderID, threadID, messageID } = event;
    const fp = path.join(PAGE_DIR, filename);
    const HOST = "http://menu.panelaimbot.com:5000";

    let waitingMessage = await api.sendMessage("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini Flash 2.0...", threadID);

    try {
      // --- STEP 1: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI ---
      await api.editMessage("üöÄ Gemini Flash 2.0 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏à‡∏î‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß)...", waitingMessage.messageID);
      
      let newApiUrl;
      let apiPrompt;
      const apiKey = "e62d60dd-8853-4233-bbcb-9466b4cbc265";

      console.log(`[INFO] User ID: ${senderID} - Building page: ${userPrompt}`);
      console.log(`[INFO] Using Gemini Flash 2.0 Conversational API`);

      // **[FIX]** ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Prompt ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      const promptSuffix = `‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ <!DOCTYPE html> ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà markdown ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢`;

      if (imageUrl) {
          console.log(`[INFO] Using Gemini Flash 2.0 with image. Image: ${imageUrl}, UID: ${senderID}`);
          apiPrompt = `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå HTML+CSS+JS ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: "${userPrompt || '‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û'}". ${promptSuffix}`;
          newApiUrl = `https://kaiz-apis.gleeze.com/api/gemini-flash-2.0?q=${encodeURIComponent(apiPrompt)}&uid=${senderID}&imageUrl=${encodeURIComponent(imageUrl)}&apikey=${apiKey}`;
      } else {
          console.log(`[INFO] Using Gemini Flash 2.0 text only. UID: ${senderID}`);
          // ‡∏ï‡∏±‡∏î‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
          const shortPrompt = userPrompt.length > 100 ? userPrompt.substring(0, 100) + "..." : userPrompt;
          apiPrompt = `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå HTML+CSS+JS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${shortPrompt}". ${promptSuffix}`;
          // ‡πÉ‡∏ä‡πâ Gemini Flash 2.0 ‡πÅ‡∏ó‡∏ô gemini-pro ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° imageUrl ‡πÄ‡∏õ‡πá‡∏ô parameter ‡πÄ‡∏õ‡∏•‡πà‡∏≤
          newApiUrl = `https://kaiz-apis.gleeze.com/api/gemini-flash-2.0?q=${encodeURIComponent(apiPrompt)}&uid=${senderID}&imageUrl=&apikey=${apiKey}`;
      }
      
      const apiResponse = await axios.get(newApiUrl, {
        timeout: 180000,
        headers: { 'Accept-Encoding': 'gzip, deflate' }
      });
      
      console.log('[DEBUG] API Response Status:', apiResponse.status);
      console.log('[DEBUG] API Response:', JSON.stringify(apiResponse.data, null, 2));

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏à‡∏≤‡∏Å API
      if (apiResponse.status !== 200 || (apiResponse.data && apiResponse.data.error)) {
        const errorMsg = apiResponse.data.error || `API returned status ${apiResponse.status}`;
        throw new Error(`API Error: ${errorMsg}`);
      }

      const answer = apiResponse.data.response;
      console.log('[DEBUG] AI Response length:', answer ? answer.length : 'null');
      console.log('[DEBUG] AI Response preview:', answer ? answer.substring(0, 200) + '...' : 'null');
      
      if (!answer || typeof answer !== 'string') {
        throw new Error("Gemini Flash 2.0 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }
      
      // --- STEP 2: ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î HTML ---
      let html = null;
      
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô markdown block ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      const patterns = [
        /```(?:html)?\s*([\s\S]+?)```/,  // ``` html ... ```
        /```\s*(<!DOCTYPE[\s\S]+?)```/,  // ``` <!DOCTYPE ... ```
        /```\s*(<html[\s\S]+?)```/,      // ``` <html ... ```
      ];
      
      let found = false;
      for (const pattern of patterns) {
        const match = answer.match(pattern);
        if (match && match[1]) {
          html = match[1].trim();
          found = true;
          console.log('[DEBUG] Found HTML in markdown block');
          break;
        }
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô markdown ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      if (!found) {
        html = answer.trim();
        console.log('[DEBUG] Using entire response as HTML');
      }

      // **[FIX]** ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
      if (!html || typeof html !== 'string') {
        console.error("No HTML content received:", html);
        throw new Error("AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤");
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà HTML ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏´‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏°
      if (!/^<!DOCTYPE html|<html[\s>]/i.test(html)) {
        console.log("Wrapping content in HTML template");
        html = `<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Generated Web</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; }
    </style>
</head>
<body>
    <div class="container">
        ${html}
    </div>
</body>
</html>`;
      }

      // --- STEP 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
      fs.writeFileSync(fp, html);

      // --- STEP 3.5: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Pastebin ---
      await api.editMessage("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÑ‡∏î‡πâ...", waitingMessage.messageID);
      const pastebinTitle = `Web Code - ${userPrompt ? userPrompt.substring(0, 50) : 'Generated Web'}`;
      const pastebinUrl = await uploadToPastebin(html, pastebinTitle);

      if (timeouts[stateKey]) clearTimeout(timeouts[stateKey]);
      const expiresAt = Date.now() + minutes * 60 * 1000;
      state[stateKey] = { 
        filename, 
        minutes, 
        expiresAt,
        pastebinUrl: pastebinUrl || null,
        createdAt: Date.now()
      };
      fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
      scheduleExpiry(stateKey, state[stateKey]);

      const durationInSeconds = ((Date.now() - startTime) / 1000).toFixed(1);
      const pageUrl = `${HOST}/pages/${filename}`;

      const sendFallbackMessage = (reason) => {
        console.error(`[Screenshot Fallback] Reason: ${reason}`);
        const rec = state[stateKey];
        let fallbackBody = `‚úÖ ${isUpdate ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡∏™‡∏£‡πâ‡∏≤‡∏á"}‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÅ‡∏ï‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)\n` +
                           `üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå:\n${pageUrl}\n` +
                           `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${durationInSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n` +
                           `üóëÔ∏è ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô: ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        
        if (rec && rec.pastebinUrl) {
          fallbackBody += `\nüìÑ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î: ${rec.pastebinUrl}`;
        }
        
        api.sendMessage(fallbackBody, threadID, messageID);
      };

      // --- STEP 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ---
      try {
        await new Promise(resolve => setTimeout(resolve, 2500));
        
        const screenshotPageUrl = `${pageUrl}?v=${Date.now()}`;
        const encodedUrl = encodeURIComponent(screenshotPageUrl);
        const screenshotApiKey = "e62d60dd-8853-4233-bbcb-9466b4cbc265";
        const screenshotApiUrl = `https://kaiz-apis.gleeze.com/api/screenshot?url=${encodedUrl}&apikey=${screenshotApiKey}`;
        
        const screenshotFileName = `screenshot_${Date.now()}.png`;
        const screenshotFilePath = path.join(CACHE_DIR, screenshotFileName);
        const writer = fs.createWriteStream(screenshotFilePath);

        const imageRes = await axios({
          url: screenshotApiUrl,
          method: 'GET',
          responseType: 'stream',
          timeout: 60000,
        });

        imageRes.data.pipe(writer);

        writer.on("finish", () => {
          const rec = state[stateKey];
          let body = `‚úÖ ${isUpdate ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡∏™‡∏£‡πâ‡∏≤‡∏á"}‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n` +
                     `üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå:\n${pageUrl}\n` +
                     `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${durationInSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n` +
                     `üóëÔ∏è ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô: ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
          
          if (rec && rec.pastebinUrl) {
            body += `\nüìÑ ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î: ${rec.pastebinUrl}`;
          }
          
          api.sendMessage(body, threadID, (err, info) => {
              if (err) return console.error(err);
              api.sendMessage({
                  attachment: fs.createReadStream(screenshotFilePath)
              }, threadID, () => {
                  if (fs.existsSync(screenshotFilePath)) {
                      fs.unlinkSync(screenshotFilePath);
                  }
              });
          }, messageID);
        });

        writer.on("error", (err) => {
          if (fs.existsSync(screenshotFilePath)) fs.unlinkSync(screenshotFilePath);
          sendFallbackMessage(`Error writing image file: ${err.message}`);
        });

      } catch (screenshotError) {
        sendFallbackMessage(`API call for screenshot failed: ${screenshotError.message}`);
      }

    } catch (e) {
      console.error('[ERROR]', e);
      let errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö\n‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${e.message}`;
      
      if (e.response) {
        errorMessage += ` (Status: ${e.response.status})`;
        if (e.response.data && e.response.data.error) {
          errorMessage += `\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API: ${e.response.data.error}`;
        }
      }
      
      await api.sendMessage(errorMessage, threadID, messageID);
    } finally {
    if (waitingMessage && waitingMessage.messageID) {
        api.unsendMessage(waitingMessage.messageID);
    }
  }
}

// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Pastebin API ---
  const PASTEBIN_API_KEY = "8ApRJDKLKO6sPUJeKID-2xFNF3Uq2Q02";
  const PASTEBIN_API_URL = "https://pastebin.com/api/api_post.php";

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Pastebin ---
  async function uploadToPastebin(code, title = "Generated Web Code") {
    try {
      const params = new URLSearchParams({
        api_dev_key: PASTEBIN_API_KEY,
        api_option: "paste",
        api_paste_code: code,
        api_paste_name: title,
        api_paste_format: "html5",
        api_paste_private: "0", // 0=public, 1=unlisted, 2=private
        api_paste_expire_date: "1H" // 1 hour expiration
      });

      const response = await axios.post(PASTEBIN_API_URL, params, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        timeout: 30000
      });

      if (response.data && response.data.startsWith('https://pastebin.com/')) {
        return response.data.trim();
      } else {
        console.error('Pastebin error:', response.data);
        return null;
      }
    } catch (error) {
      console.error('Failed to upload to Pastebin:', error.message);
      return null;
    }
  }
