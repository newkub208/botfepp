const axios = require("axios");
const express = require("express");
const fs = require("fs");
const path = require("path");

// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå ---
const PAGE_DIR = path.join(__dirname, "..", "..", "pages");
if (!fs.existsSync(PAGE_DIR)) {
  fs.mkdirSync(PAGE_DIR, { recursive: true });
}

const CACHE_DIR = path.join(__dirname, "cache");
if (!fs.existsSync(CACHE_DIR)) {
  fs.mkdirSync(CACHE_DIR, { recursive: true });
}

const STATE_FILE = path.join(__dirname, "..", "..", "state.json");
let state = {};
try {
  state = JSON.parse(fs.readFileSync(STATE_FILE, "utf8"));
} catch {
  state = {};
}

// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ---
if (!global.__webServerStarted) {
  const app = express();
  app.use("/pages", express.static(PAGE_DIR));
  const PORT = 5000;
  const HOST = "http://menu.panelaimbot.com";
  
  app.listen(PORT, () => console.log(`üåê HTML server is running at: ${HOST}:${PORT}/pages`));
  global.__webServerStarted = true;
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
const slugify = t =>
  t.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "").substring(0, 50);

const randomWords = [
  'aurora', 'breeze', 'comet', 'dream', 'echo', 'forest', 'galaxy',
  'harmony', 'island', 'journey', 'karma', 'lagoon', 'meadow', 'nebula',
  'ocean', 'peak', 'quest', 'river', 'serene', 'tundra', 'umbra',
  'vortex', 'willow', 'xenon', 'yonder', 'zephyr', 'pixel', 'lotus',
  'ember', 'frost', 'glen', 'haven', 'ivory', 'jade'
];

function generateRandomFilename() {
  const word = randomWords[Math.floor(Math.random() * randomWords.length)];
  const shortName = word.substring(0, 5);
  return shortName + '.html';
}


const timeouts = {};
Object.entries(state).forEach(([stateKey, rec]) => scheduleExpiry(stateKey, rec));

function scheduleExpiry(stateKey, rec) {
  if (!rec || !rec.expiresAt) return;
  const msLeft = rec.expiresAt - Date.now();
  if (msLeft <= 0) {
    return deletePage(stateKey);
  }
  timeouts[stateKey] = setTimeout(() => deletePage(stateKey), msLeft);
}

function deletePage(stateKey) {
  const rec = state[stateKey];
  if (!rec || typeof rec.filename !== 'string') {
    if (state[stateKey]) {
        delete state[stateKey];
        fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
    }
    return;
  }

  const fp = path.join(PAGE_DIR, rec.filename);
  try {
    if (fs.existsSync(fp)) {
      fs.unlinkSync(fp);
      console.log(`üóëÔ∏è Deleted page: ${rec.filename}`);
    }
    delete state[stateKey];
    fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
    clearTimeout(timeouts[stateKey]);
  } catch (err) {
    console.error(`Failed to delete page ${rec.filename}:`, err);
  }
}

// --- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å ---
module.exports = {
  name: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö",
  description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏à‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢ AI ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤",
  version: "7.6.0", // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
  aliases: ["createweb", "webai", "htmlai", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö"],
  nashPrefix: false,
  cooldowns: 30,

  async execute(api, event, args, prefix) {
    const { threadID, messageID, senderID, type, messageReply } = event;
    
    let inputArgs = [...args];
    let prompt = "";
    let minutes = 5; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    let imageUrl = null;
    let statePrompt = "";

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Reply ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if (type === "message_reply" && messageReply.attachments && messageReply.attachments.some(att => att.type === "photo")) {
        const photoAttachment = messageReply.attachments.find(att => att.type === "photo");
        imageUrl = photoAttachment.url;
        prompt = inputArgs.join(" ").trim();
        statePrompt = prompt || `image-${photoAttachment.ID}`;
        console.log(`[INFO] Image URL from reply: ${imageUrl}`);
    } else {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const urlRegex = /(https?:\/\/[^\s]+)/;
        const urlArg = inputArgs.find(arg => urlRegex.test(arg) && (arg.includes('.jpg') || arg.includes('.png') || arg.includes('.jpeg')));
        if (urlArg) {
            imageUrl = urlArg;
            inputArgs = inputArgs.filter(arg => arg !== urlArg);
            console.log(`[INFO] Image URL from argument: ${imageUrl}`);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
        if (inputArgs.length > 0) {
            const lastArg = inputArgs[inputArgs.length - 1];
            const potentialMinutes = parseInt(lastArg, 10);
            if (!isNaN(potentialMinutes) && potentialMinutes >= 1 && potentialMinutes <= 60) {
                minutes = potentialMinutes;
                inputArgs.pop(); // ‡πÄ‡∏≠‡∏≤‡∏ô‡∏≤‡∏ó‡∏µ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å arguments
            }
        }
        prompt = inputArgs.join(" ").trim();
        statePrompt = prompt || imageUrl;
    }

    if (!prompt && !imageUrl) {
      return api.sendMessage(
        `üìù ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ Reply ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n- ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ 15\n- (Reply ‡∏£‡∏π‡∏õ) ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏ô‡∏†‡∏≤‡∏û\n\n(‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πâ 1-60 ‡∏ô‡∏≤‡∏ó‡∏µ)`,
        threadID,
        messageID
      );
    }

    const stateKey = slugify(statePrompt);
    const existingState = state[stateKey];

    if (existingState && existingState.filename) {
      await api.sendMessage(
        `‚úèÔ∏è ‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô ${Math.ceil((existingState.expiresAt - Date.now()) / 60000)} ‡∏ô‡∏≤‡∏ó‡∏µ)\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡∏ö...`,
        threadID,
        messageID
      );
      return buildPage(api, event, prompt, minutes, true, stateKey, existingState.filename, imageUrl);
    }
    
    let newFilename = generateRandomFilename();
    while (Object.values(state).some(rec => rec && rec.filename === newFilename)) {
        newFilename = generateRandomFilename();
    }
    return buildPage(api, event, prompt, minutes, false, stateKey, newFilename, imageUrl);
  },
};

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Prompt ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö) ---
async function buildPage(api, event, userPrompt, minutes, isUpdate, stateKey, filename, imageUrl = null) {
  const startTime = Date.now();
  const { senderID, threadID, messageID } = event;
  const fp = path.join(PAGE_DIR, filename);
  const HOST = "http://menu.panelaimbot.com:5000";

  let waitingMessage = await api.sendMessage("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI...", threadID);

  try {
    // --- STEP 1: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI ---
    await api.editMessage("üöÄ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...", waitingMessage.messageID);
    
    let newApiUrl;
    let apiPrompt;
    const apiKey = "e62d60dd-8853-4233-bbcb-9466b4cbc265";

    // **[FIX]** ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Prompt ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const promptSuffix = `‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡∏î‡∏¥‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ <!DOCTYPE html> ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà markdown, ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î‡πÜ. ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô.`;

    if (imageUrl) {
        console.log(`[INFO] Using vision API for web generation. Image: ${imageUrl}`);
        apiPrompt = `‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ "${userPrompt || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}", ‡∏à‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Single-file HTML with inline CSS and JS) ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û. ${promptSuffix}`;
        newApiUrl = `https://kaiz-apis.gleeze.com/api/gemini-flash-2.0?q=${encodeURIComponent(apiPrompt)}&uid=${senderID}&imageUrl=${encodeURIComponent(imageUrl)}&apikey=${apiKey}`;
    } else {
        console.log("[INFO] Using text API for web generation.");
        apiPrompt = `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Single-file HTML with inline CSS and JS) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ: "${userPrompt}". ${promptSuffix}`;
        newApiUrl = `https://kaiz-apis.gleeze.com/api/gemini-pro?ask=${encodeURIComponent(apiPrompt)}&uid=${senderID}&apikey=${apiKey}`;
    }
    
    const apiResponse = await axios.get(newApiUrl, {
      timeout: 180000,
      headers: { 'Accept-Encoding': 'gzip, deflate' }
    });
    console.log('[DEBUG] API Response:', JSON.stringify(apiResponse.data, null, 2));

    const answer = apiResponse.data.response;
    if (!answer || typeof answer !== 'string') {
      throw new Error("AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }
    
    // --- STEP 2: ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î HTML ---
    let html = null;
    const codeMatch = answer.match(/```(?:html)?\s*([\s\S]+?)```/);

    if (codeMatch && codeMatch[1]) {
      html = codeMatch[1].trim();
    } else {
      html = answer.trim();
    }

    // **[FIX]** ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏î‡∏Å‡∏∏‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
    if (!html || typeof html !== 'string' || !/^<!DOCTYPE html|<html[\s>]/i.test(html)) {
      console.error("Invalid HTML content received:", html);
      throw new Error("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HTML ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏´‡∏£‡∏∑‡∏≠ AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤");
    }

    // --- STEP 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
    fs.writeFileSync(fp, html);

    if (timeouts[stateKey]) clearTimeout(timeouts[stateKey]);
    const expiresAt = Date.now() + minutes * 60 * 1000;
    state[stateKey] = { filename, minutes, expiresAt };
    fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
    scheduleExpiry(stateKey, state[stateKey]);

    const durationInSeconds = ((Date.now() - startTime) / 1000).toFixed(1);
    const pageUrl = `${HOST}/pages/${filename}`;

    const sendFallbackMessage = (reason) => {
      console.error(`[Screenshot Fallback] Reason: ${reason}`);
      const fallbackBody = `‚úÖ ${isUpdate ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡∏™‡∏£‡πâ‡∏≤‡∏á"}‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÅ‡∏ï‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)\n` +
                           `üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå:\n${pageUrl}\n` +
                           `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${durationInSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n` +
                           `üóëÔ∏è ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô: ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
      api.sendMessage(fallbackBody, threadID, messageID);
    };

    // --- STEP 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ---
    try {
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      const screenshotPageUrl = `${pageUrl}?v=${Date.now()}`;
      const encodedUrl = encodeURIComponent(screenshotPageUrl);
      const screenshotApiKey = "e62d60dd-8853-4233-bbcb-9466b4cbc265";
      const screenshotApiUrl = `https://kaiz-apis.gleeze.com/api/screenshot?url=${encodedUrl}&apikey=${screenshotApiKey}`;
      
      const screenshotFileName = `screenshot_${Date.now()}.png`;
      const screenshotFilePath = path.join(CACHE_DIR, screenshotFileName);
      const writer = fs.createWriteStream(screenshotFilePath);

      const imageRes = await axios({
        url: screenshotApiUrl,
        method: 'GET',
        responseType: 'stream',
        timeout: 60000,
      });

      imageRes.data.pipe(writer);

      writer.on("finish", () => {
        const body = `‚úÖ ${isUpdate ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡∏™‡∏£‡πâ‡∏≤‡∏á"}‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n` +
                     `üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå:\n${pageUrl}\n` +
                     `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ${durationInSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n` +
                     `üóëÔ∏è ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô: ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        
        api.sendMessage(body, threadID, (err, info) => {
            if (err) return console.error(err);
            api.sendMessage({
                attachment: fs.createReadStream(screenshotFilePath)
            }, threadID, () => {
                if (fs.existsSync(screenshotFilePath)) {
                    fs.unlinkSync(screenshotFilePath);
                }
            });
        }, messageID);
      });

      writer.on("error", (err) => {
        if (fs.existsSync(screenshotFilePath)) fs.unlinkSync(screenshotFilePath);
        sendFallbackMessage(`Error writing image file: ${err.message}`);
      });

    } catch (screenshotError) {
      sendFallbackMessage(`API call for screenshot failed: ${screenshotError.message}`);
    }

  } catch (e) {
    console.error(e);
    let errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö\n‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${e.message}`;
    if (e.response) {
      errorMessage += ` (Status: ${e.response.status})`;
      if (e.response.data && e.response.data.error) {
        errorMessage += `\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API: ${e.response.data.error}`;
      }
    }
    await api.sendMessage(errorMessage, threadID, messageID);
  } finally {
    if (waitingMessage && waitingMessage.messageID) {
        api.unsendMessage(waitingMessage.messageID);
    }
  }
}
