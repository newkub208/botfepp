const fs = require("fs");
const path = require("path");
const axios = require("axios");

// Path to store AI state
const aiStateFile = path.join(__dirname, "../events/aiAutoState.json");
const configPath = path.join(__dirname, '../../config.json');
// Create cache directory for images
const cacheDir = path.join(__dirname, "..", "..", "cache");
if (!fs.existsSync(cacheDir)) {
    fs.mkdirSync(cacheDir, { recursive: true });
}

// Initialize AI state file if it doesn't exist
if (!fs.existsSync(aiStateFile)) {
    fs.writeFileSync(aiStateFile, JSON.stringify({ enabled: false, threads: {} }));
}

module.exports = {
    name: "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏öai",
    description: "‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI",
    usage: "[‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î] ‡∏´‡∏£‡∏∑‡∏≠ [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û]",
    nashPrefix: false,
    execute: async (api, event, args) => {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
        
        // If no arguments, show usage
        if (!args || args.length === 0) {
            return api.sendMessage("‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:\n‚Ä¢ `‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏öai ‡πÄ‡∏õ‡∏¥‡∏î` - ‡πÄ‡∏õ‡∏¥‡∏î AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n‚Ä¢ `‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏öai ‡∏õ‡∏¥‡∏î` - ‡∏õ‡∏¥‡∏î AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n‚Ä¢ `‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏öai [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]` - ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û", event.threadID, event.messageID);
        }

        const action = args[0];
        
        // Handle enable/disable for admins only
        if (action === "‡πÄ‡∏õ‡∏¥‡∏î" || action === "‡∏õ‡∏¥‡∏î") {
            // Check if user is admin
            if (event.senderID !== config.adminUID) {
                return api.sendMessage("‚ö†Ô∏è ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏î‡πâ!", event.threadID, event.messageID);
            }

            try {
                // Read current state
                let aiState = {};
                if (fs.existsSync(aiStateFile)) {
                    aiState = JSON.parse(fs.readFileSync(aiStateFile, "utf8"));
                } else {
                    aiState = { enabled: false, threads: {} };
                }
                
                if (action === "‡πÄ‡∏õ‡∏¥‡∏î") {
                    aiState.enabled = true;
                    aiState.threads[event.threadID] = true;
                    fs.writeFileSync(aiStateFile, JSON.stringify(aiState, null, 2));
                    return api.sendMessage("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ AI ‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ", event.threadID, event.messageID);
                } else if (action === "‡∏õ‡∏¥‡∏î") {
                    if (!aiState.threads) aiState.threads = {};
                    aiState.threads[event.threadID] = false;
                    fs.writeFileSync(aiStateFile, JSON.stringify(aiState, null, 2));
                    return api.sendMessage("‚ùå ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß! AI ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ", event.threadID, event.messageID);
                }
            } catch (error) {
                console.error("Error managing AI state:", error);
                return api.sendMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö AI: " + error.message, event.threadID, event.messageID);
            }
        } else {
            // Handle AI conversation - available to all users
            const query = args.join(" ");
            
            try {
                // Send waiting message
                const waitingMsg = await api.sendMessage("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...", event.threadID);
                
                // Call the new API
                const response = await axios.get('https://haji-mix-api.gleeze.com/api/gpt4o', {
                    params: {
                        ask: query,
                        uid: event.senderID,
                        roleplay: '‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏îhtml‡∏ó‡∏≥‡∏™‡∏ß‡∏¢‡πÜ‡∏ï‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô',
                        api_key: '024875ee661a808c753b5e2f6a3eb908547691275d2015a884772153679618ef'
                    },
                    timeout: 30000
                });

                // Delete waiting message
                api.unsendMessage(waitingMsg.messageID);

                if (response.data && response.data.answer) {
                    let messageText = response.data.answer;
                    
                    // Send text response first
                    await api.sendMessage(messageText, event.threadID, event.messageID);
                    
                    // Check if there are images in the response and send them as attachments
                    if (response.data.images && response.data.images.length > 0) {
                        console.log(`[DEBUG] Found ${response.data.images.length} images to send`);
                        
                        for (let i = 0; i < response.data.images.length; i++) {
                            const img = response.data.images[i];
                            console.log(`[DEBUG] Processing image ${i + 1}: ${img.url}`);
                            
                            try {
                                // Download image and save to file first
                                const imageResponse = await axios.get(img.url, {
                                    responseType: 'arraybuffer',
                                    timeout: 30000,
                                    headers: {
                                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                                    }
                                });
                                
                                console.log(`[DEBUG] Successfully downloaded image ${i + 1}, saving to file`);
                                
                                // Generate unique filename
                                const timestamp = Date.now();
                                const imageExtension = img.url.includes('.png') ? '.png' : '.jpg';
                                const fileName = `image_${timestamp}_${i}.${imageExtension}`;
                                const filePath = path.join(cacheDir, fileName);
                                
                                // Save image to file
                                fs.writeFileSync(filePath, imageResponse.data);
                                console.log(`[DEBUG] Image saved to: ${filePath}`);
                                
                                // Send image as attachment
                                const imageMessage = {
                                    attachment: fs.createReadStream(filePath)
                                };
                                
                                // Add description if available
                                if (img.description) {
                                    imageMessage.body = `üì∑ ${img.description}`;
                                }
                                
                                await api.sendMessage(imageMessage, event.threadID);
                                console.log(`[DEBUG] Successfully sent image ${i + 1} as attachment`);
                                
                                // Clean up file after sending
                                setTimeout(() => {
                                    if (fs.existsSync(filePath)) {
                                        fs.unlinkSync(filePath);
                                        console.log(`[DEBUG] Cleaned up file: ${filePath}`);
                                    }
                                }, 5000); // Delete after 5 seconds
                                
                                // Add delay between images to avoid rate limiting
                                if (i < response.data.images.length - 1) {
                                    await new Promise(resolve => setTimeout(resolve, 1000));
                                }
                                
                            } catch (imageError) {
                                console.error(`[ERROR] Failed to send image ${i + 1}:`, imageError.message);
                                // Fallback to sending URL if image download fails
                                try {
                                    await api.sendMessage(`üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${i + 1}: ${img.url}${img.description ? `\n(${img.description})` : ''}`, event.threadID);
                                } catch (urlError) {
                                    console.error(`[ERROR] Failed to send URL fallback:`, urlError);
                                }
                            }
                        }
                    }
                    
                    return;
                } else {
                    return api.sendMessage("‚ùå AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", event.threadID, event.messageID);
                }

            } catch (error) {
                console.error("AI Query Error:", error);
                return api.sendMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI: " + error.message, event.threadID, event.messageID);
            }
        }
    }
};
