const fs = require('fs');
const path = require('path');

module.exports = {
    name: "‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°",
    description: "‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)",
    usage: "/‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°",
    version: "1.0.0",
    nashPrefix: false,
    aliases: ['clearjoinhistory', 'cleargrouphistory'],
    cooldowns: 10,
    
    async execute(api, event, args, prefix) {
        const { threadID, messageID, senderID } = event;
        
        try {
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            const configPath = path.join(__dirname, '../../config.json');
            const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (senderID !== config.adminUID) {
                return api.sendMessage('‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!', threadID, messageID);
            }
            
            const joinLogPath = path.join(__dirname, '../cache/join_group_log.json');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!fs.existsSync(joinLogPath)) {
                return api.sendMessage('üìù ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á', threadID, messageID);
            }
            
            let joinLog = [];
            try {
                joinLog = JSON.parse(fs.readFileSync(joinLogPath, 'utf-8'));
            } catch (error) {
                return api.sendMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ', threadID, messageID);
            }
            
            if (joinLog.length === 0) {
                return api.sendMessage('üìù ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á', threadID, messageID);
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            const confirmMessage = `‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!\n\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${joinLog.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å\n\n‚è±Ô∏è ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
            
            const confirmMsg = await api.sendMessage(confirmMessage, threadID, messageID);
            
            // ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            const handleReply = (replyEvent) => {
                if (replyEvent.threadID !== threadID || replyEvent.senderID !== senderID) {
                    return;
                }
                
                const userReply = replyEvent.body.trim().toLowerCase();
                
                if (userReply === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') {
                    try {
                        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏á
                        const backupPath = path.join(__dirname, '../cache/join_group_log_backup.json');
                        const backupData = {
                            timestamp: new Date().toISOString(),
                            clearedBy: senderID,
                            data: joinLog
                        };
                        
                        fs.writeFileSync(backupPath, JSON.stringify(backupData, null, 2));
                        
                        // ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                        fs.writeFileSync(joinLogPath, JSON.stringify([], null, 2));
                        
                        const successMessage = `‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n‚Ä¢ ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${joinLog.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß: join_group_log_backup.json\n‚Ä¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: ${senderID}\n‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}`;
                        
                        api.sendMessage(successMessage, threadID);
                        api.unsendMessage(confirmMsg.messageID);
                        
                    } catch (error) {
                        console.error('Error clearing join history:', error);
                        api.sendMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: ${error.message}`, threadID);
                    }
                    
                } else if (userReply === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {
                    api.sendMessage('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', threadID);
                    api.unsendMessage(confirmMsg.messageID);
                    
                } else {
                    api.sendMessage('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', threadID);
                    return; // ‡πÑ‡∏°‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å listener ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
                }
                
                // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å listener
                api.removeListener('message', handleReply);
            };
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener
            api.addListener('message', handleReply);
            
            // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                api.removeListener('message', handleReply);
                api.sendMessage('‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', threadID);
                api.unsendMessage(confirmMsg.messageID);
            }, 30000);
            
        } catch (error) {
            console.error('Error in ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° command:', error);
            api.sendMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, threadID, messageID);
        }
    }
};
