const fs = require('fs');
const path = require('path');
const { loadDetailedAdmins } = require('../../utils/adminManager');

// --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
const SUPER_ADMIN_ID = '61555184860915';
const ADMIN_FILE_PATH = path.join(__dirname, '../../admin_list.json');

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---
function loadAdmins() {
    try {
        if (fs.existsSync(ADMIN_FILE_PATH)) {
            const data = fs.readFileSync(ADMIN_FILE_PATH, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Error loading admin list:', error);
    }
    return [];
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ---
function hasPermission(senderID) {
    const admins = loadAdmins();
    return senderID === SUPER_ADMIN_ID || admins.includes(senderID);
}

module.exports = {
    name: "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
    description: "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
    version: "2.0.0",
    aliases: ["adminlist", "listadmin", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "admin-list", "list-admin", "admins"],
    nashPrefix: false,
    cooldowns: 2,

    async execute(api, event, args, prefix) {
        const { threadID, messageID, senderID } = event;

        // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ---
        if (!hasPermission(senderID)) {
            return api.sendMessage("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", threadID, messageID);
        }

        try {
            const detailedData = loadDetailedAdmins();
            const now = new Date();
            
            let message = `üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó\n`;
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            message += `üëë ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:\n`;
            try {
                const superAdminInfo = await api.getUserInfo(SUPER_ADMIN_ID);
                const superAdminName = superAdminInfo[SUPER_ADMIN_ID]?.name || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
                message += `‚Ä¢ ${superAdminName} (${SUPER_ADMIN_ID})\n`;
                message += `  ‚îî‚îÄ‚îÄ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î | ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏\n\n`;
            } catch (e) {
                message += `‚Ä¢ UID: ${SUPER_ADMIN_ID}\n`;
                message += `  ‚îî‚îÄ‚îÄ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î | ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏\n\n`;
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            const activeAdmins = Object.keys(detailedData.temporaryAdmins).filter(id => {
                const admin = detailedData.temporaryAdmins[id];
                return admin.isActive && new Date(admin.expiresAt) > now;
            });

            if (activeAdmins.length > 0) {
                // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢)
                const sortedAdmins = activeAdmins.map(id => ({
                    id,
                    admin: detailedData.temporaryAdmins[id],
                    maxKicks: detailedData.temporaryAdmins[id].maxKicks || 5
                })).sort((a, b) => b.maxKicks - a.maxKicks);

                message += `üõ°Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (${activeAdmins.length} ‡∏Ñ‡∏ô):\n`;
                
                for (let i = 0; i < sortedAdmins.length; i++) {
                    const { id: adminID, admin, maxKicks } = sortedAdmins[i];
                    
                    try {
                        const userInfo = await api.getUserInfo(adminID);
                        const userName = userInfo[adminID]?.name || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
                        
                        const expiresAt = new Date(admin.expiresAt);
                        const timeLeft = Math.ceil((expiresAt - now) / (1000 * 60 * 60 * 24));
                        
                        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                        let statusEmoji = "";
                        const usagePercent = (admin.kickCount / maxKicks) * 100;
                        if (usagePercent >= 80) statusEmoji = "üî¥"; // ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
                        else if (usagePercent >= 60) statusEmoji = "üü°"; // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                        else statusEmoji = "üü¢"; // ‡∏õ‡∏Å‡∏ï‡∏¥
                        
                        message += `${i + 1}. ${statusEmoji} ${userName} (${adminID})\n`;
                        message += `   ‚îî‚îÄ‚îÄ ‡πÄ‡∏ï‡∏∞: ${admin.kickCount}/${maxKicks} (${usagePercent.toFixed(1)}%) | `;
                        message += `‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${timeLeft} ‡∏ß‡∏±‡∏ô | `;
                        message += `‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${expiresAt.toLocaleString('th-TH', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        })}\n`;
                        
                        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î
                        if (usagePercent >= 80 || timeLeft <= 1) {
                            message += `   ‚îî‚îÄ‚îÄ ‚ö†Ô∏è `;
                            if (usagePercent >= 80) message += `‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏°‡∏î `;
                            if (timeLeft <= 1) message += `‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î`;
                            message += `\n`;
                        }
                    } catch (e) {
                        message += `${i + 1}. UID: ${adminID}\n`;
                        message += `   ‚îî‚îÄ‚îÄ ‡πÄ‡∏ï‡∏∞: ${admin.kickCount}/${maxKicks} | `;
                        message += `‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${new Date(admin.expiresAt).toLocaleString('th-TH')}\n`;
                    }
                }
            } else {
                message += `üõ°Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: ‡πÑ‡∏°‡πà‡∏°‡∏µ\n`;
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (5 ‡∏Ñ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            if (detailedData.adminHistory.length > 0) {
                message += `\nüìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (${Math.min(detailedData.adminHistory.length, 5)} ‡∏Ñ‡∏ô):\n`;
                
                const recentHistory = detailedData.adminHistory.slice(-5).reverse();
                for (let i = 0; i < recentHistory.length; i++) {
                    const history = recentHistory[i];
                    try {
                        const userInfo = await api.getUserInfo(history.adminId);
                        const userName = userInfo[history.adminId]?.name || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
                        message += `${i + 1}. ${userName} - ${history.removedReason}\n`;
                    } catch (e) {
                        message += `${i + 1}. UID: ${history.adminId} - ${history.removedReason}\n`;
                    }
                }
            }

            message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
            message += `üìä ‡∏™‡∏£‡∏∏‡∏õ:\n`;
            message += `‚Ä¢ ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 1 ‡∏Ñ‡∏ô\n`;
            message += `‚Ä¢ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: ${activeAdmins.length} ‡∏Ñ‡∏ô\n`;
            message += `‚Ä¢ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${activeAdmins.length + 1} ‡∏Ñ‡∏ô\n`;
            message += `‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${detailedData.adminHistory.length} ‡∏Ñ‡∏ô\n\n`;
            message += `üìÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}`;

            api.sendMessage(message, threadID, messageID);

        } catch (error) {
            console.error('Admin list command error:', error);
            api.sendMessage(
                `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n` +
                `üîß Error: ${error.message}`,
                threadID,
                messageID
            );
        }
    }
};
