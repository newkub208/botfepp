const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports = {
  name: "ytmp3",
  description: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (MP3) ‡∏à‡∏≤‡∏Å YouTube",
  version: "1.0.0",
  aliases: ["youtubemp3", "‡πÄ‡∏û‡∏•‡∏á"],
  nashPrefix: false,
  cooldowns: 30,

  async execute(api, event, args, prefix) {
    const { threadID, messageID } = event;

    // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå cache ---
    const cacheDir = path.join(__dirname, "..", "cache");
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }

    const searchQuery = args.join(" ").trim();

    if (!searchQuery) {
      return api.sendMessage(
        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${prefix}ytmp3 ‡πÄ‡∏ß‡∏•‡∏≤ cocktail`,
        threadID,
        messageID
      );
    }

    let waitingMessage = await api.sendMessage(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á "${searchQuery}"...`, threadID);
    
    try {
      // --- Step 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ URL ---
      const searchApiKey = "e62d60dd-8853-4233-bbcb-9466b4cbc265"; // ‡πÉ‡∏ä‡πâ Key ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
      const searchApiUrl = `https://kaiz-apis.gleeze.com/api/ytsearch?q=${encodeURIComponent(searchQuery)}&apikey=${searchApiKey}`;

      const searchResponse = await axios.get(searchApiUrl, { timeout: 60000 });
      const searchData = searchResponse.data;
      
      if (typeof searchData !== 'object' || searchData === null || !Array.isArray(searchData.items) || searchData.items.length === 0) {
        const apiError = searchData.error || searchData.message || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
        throw new Error(apiError);
      }
      
      const videoInfo = searchData.items[0];
      
      if (!videoInfo || !videoInfo.url) {
          throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
      }

      const { url: videoUrl, title: videoTitle } = videoInfo;

      await api.editMessage(`‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á "${videoTitle}" ‡πÅ‡∏•‡πâ‡∏ß!\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î MP3...`, waitingMessage.messageID);

      // --- Step 2: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô MP3 ---
      const mp3ApiKey = "e62d60dd-8853-4233-bbcb-9466b4cbc265";
      const mp3ApiUrl = `https://kaiz-apis.gleeze.com/api/ytdown-mp3?url=${encodeURIComponent(videoUrl)}&apikey=${mp3ApiKey}`;
      
      const mp3Response = await axios.get(mp3ApiUrl, { timeout: 60000 });
      const mp3Data = mp3Response.data;
      
      if (!mp3Data || !mp3Data.download_url) {
        const apiMp3Error = mp3Data.error || mp3Data.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î MP3 ‡πÑ‡∏î‡πâ";
        throw new Error(apiMp3Error);
      }

      const { title, download_url: finalDownloadUrl } = mp3Data;
      
      await api.editMessage(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á: "${title}"...`, waitingMessage.messageID);

      // --- Step 3: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå MP3 ---
      const audioFileName = `ytmp3_${Date.now()}.mp3`;
      const audioFilePath = path.join(cacheDir, audioFileName);
      
      const audioStreamResponse = await axios({
        url: finalDownloadUrl,
        method: 'GET',
        responseType: 'stream',
        timeout: 600000, // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ (600,000 ms)
      });

      const writer = fs.createWriteStream(audioFilePath);
      audioStreamResponse.data.pipe(writer);

      return new Promise((resolve, reject) => {
        writer.on("finish", () => {
          api.sendMessage({
            body: `‚úÖ ‡πÄ‡∏û‡∏•‡∏á: ${title}`,
            attachment: fs.createReadStream(audioFilePath)
          }, threadID, (err) => {
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô cache ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
            if (fs.existsSync(audioFilePath)) {
              fs.unlinkSync(audioFilePath);
            }
            if (err) {
              console.error("[YTMP3 Send Error]", err);
              reject(err);
            } else {
              // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î..."
              api.unsendMessage(waitingMessage.messageID).catch(() => {});
              resolve();
            }
          }, messageID);
        });

        writer.on("error", (err) => {
          if (fs.existsSync(audioFilePath)) {
            fs.unlinkSync(audioFilePath);
          }
          console.error("[YTMP3 Download Error]", err);
          reject(err);
        });
      });

    } catch (error) {
      console.error("[YTMP3 Command Error]", error);
      let errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${error.message}`;
      if (error.response) {
          console.error("API Response Data:", error.response.data);
          errorMessage += `\n(‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${error.response.statusText || error.message})`;
      }
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      await api.editMessage(errorMessage, waitingMessage.messageID);
    }
  },
};

