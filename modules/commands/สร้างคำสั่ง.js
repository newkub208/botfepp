/**
 * @name ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
 * @description ‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AI (‡πÉ‡∏ä‡πâ Gemini Vision API) ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏±‡∏ô - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
 * @version 2.4.2
 * @author (Your Name) - Updated to use Gemini Vision endpoint + Enhanced error handling
 * @nashPrefix false
 * @cooldowns 60
 * @aliases ["createcmd", "newcmd", "cmd", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"]
 */

// --- Dependencies ---
const axios = require('axios');
const fs = require("fs");
const path = require("path");

// --- Configuration ---
const CONFIG = {
    // [UPDATED] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô gemini-vision endpoint 
    KAIZ_API_URL: "https://kaiz-apis.gleeze.com/api/gemini-vision",
    KAIZ_API_KEY: "e62d60dd-8853-4233-bbcb-9466b4cbc265",
    COMMAND_EXPIRY_HOURS: 24,
};

// --- Directories and State for Generated Commands ---
const GENERATED_CMD_DIR = path.join(__dirname, "generated_commands");
const STATE_FILE = path.join(GENERATED_CMD_DIR, "_state.json");
const USER_HISTORY_FILE = path.join(GENERATED_CMD_DIR, "_user_history.json");

fs.mkdirSync(GENERATED_CMD_DIR, { recursive: true });

let commandState = {};
let userHistory = {};

try {
    if (fs.existsSync(STATE_FILE)) {
        commandState = JSON.parse(fs.readFileSync(STATE_FILE, "utf8"));
    }
} catch (error) {
    console.error("Failed to load generated commands state file:", error);
    commandState = {};
}

try {
    if (fs.existsSync(USER_HISTORY_FILE)) {
        userHistory = JSON.parse(fs.readFileSync(USER_HISTORY_FILE, "utf8"));
    }
} catch (error) {
    console.error("Failed to load user history file:", error);
    userHistory = {};
}

// --- Helper Functions ---
function formatRemainingTime(ms) {
    if (ms <= 0) return "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß";
    let seconds = Math.floor(ms / 1000);
    let minutes = Math.floor(seconds / 60);
    let hours = Math.floor(minutes / 60);
    minutes %= 60;
    let result = [];
    if (hours > 0) result.push(`${hours}‡∏ä‡∏°`);
    if (minutes > 0) result.push(`${minutes}‡∏ô‡∏≤‡∏ó‡∏µ`);
    return result.length > 0 ? result.join(' ') : "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ";
}

function saveUserHistory() {
    try {
        fs.writeFileSync(USER_HISTORY_FILE, JSON.stringify(userHistory, null, 2));
    } catch (error) {
        console.error("Failed to save user history:", error);
    }
}

function addToUserHistory(userId, prompt, commandName) {
    if (!userHistory[userId]) {
        userHistory[userId] = {
            requests: [],
            totalCommands: 0,
            lastUsed: Date.now()
        };
    }
    
    userHistory[userId].requests.unshift({
        prompt: prompt,
        commandName: commandName,
        timestamp: Date.now()
    });
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà 10 ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (userHistory[userId].requests.length > 10) {
        userHistory[userId].requests = userHistory[userId].requests.slice(0, 10);
    }
    
    userHistory[userId].totalCommands++;
    userHistory[userId].lastUsed = Date.now();
    saveUserHistory();
}

function getUserHistory(userId) {
    return userHistory[userId] || null;
}

function generateSmartPrompt(userPrompt, userId) {
    const history = getUserHistory(userId);
    let enhancedPrompt = userPrompt;
    
    if (history && history.requests.length > 0) {
        const recentRequests = history.requests.slice(0, 3).map(r => r.prompt).join(', ');
        enhancedPrompt = `Based on user's request: "${userPrompt}". User's recent requests context: ${recentRequests}. Create a JavaScript bot command that fits the request.`;
    } else {
        enhancedPrompt = `Create a JavaScript bot command for: "${userPrompt}"`;
    }
    
    return enhancedPrompt;
}

// --- Expiry Management ---
const timeouts = {};

function deleteGeneratedCommand(commandName) {
    const rec = commandState[commandName];
    if (!rec || !rec.filename) {
        if (commandState[commandName]) {
            delete commandState[commandName];
            fs.writeFileSync(STATE_FILE, JSON.stringify(commandState, null, 2));
        }
        return;
    }
    const filePath = path.join(GENERATED_CMD_DIR, rec.filename);
    try {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è Deleted expired command file: ${rec.filename}`);
        }
        delete commandState[commandName];
        fs.writeFileSync(STATE_FILE, JSON.stringify(commandState, null, 2));
        clearTimeout(timeouts[commandName]);
        console.log(`‚ÑπÔ∏è Command "${commandName}" has been deleted. Bot may require a restart or command reload to reflect the change.`);
    } catch (err) {
        console.error(`Failed to delete command file ${rec.filename}:`, err);
    }
}

function scheduleCommandExpiry(commandName, rec) {
    if (!rec || !rec.expiresAt) return;
    const msLeft = rec.expiresAt - Date.now();
    if (msLeft <= 0) {
        return deleteGeneratedCommand(commandName);
    }
    timeouts[commandName] = setTimeout(() => deleteGeneratedCommand(commandName), msLeft);
}

Object.entries(commandState).forEach(([cmdName, rec]) => scheduleCommandExpiry(cmdName, rec));

// --- Functions for Listing and Deleting ---

async function listGeneratedCommands(api, event, prefix) {
    const { threadID, messageID, senderID } = event;
    const commandEntries = Object.entries(commandState);
    const userCommands = commandEntries.filter(([, data]) => data.creatorId === senderID);
    const userHistoryData = getUserHistory(senderID);

    if (commandEntries.length === 0) {
        return api.sendMessage("ü§ñ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", threadID, messageID);
    }

    let response = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á\n" +
                  "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (userHistoryData) {
        response += `üë§ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n`;
        response += `   ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${userHistoryData.totalCommands} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n`;
        response += `   ‚Ä¢ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${userCommands.length} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n\n`;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    if (userCommands.length > 0) {
        response += "üü¢ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:\n";
        response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        userCommands.forEach(([commandName, data], index) => {
            const remainingMs = data.expiresAt - Date.now();
            const remainingTime = formatRemainingTime(remainingMs);
            const expiryDate = new Date(data.expiresAt).toLocaleString("th-TH", {
                day: 'numeric', month: 'short', hour: '2-digit', minute: '2-digit', hour12: false
            });

            response += `${index + 1}. üí° ${data.prompt}\n`;
            response += `   ‚îî üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${prefix}${commandName}\n`;
            response += `   ‚îî ‚è∞ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${expiryDate} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingTime})\n\n`;
        });
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const otherCommands = commandEntries.filter(([, data]) => data.creatorId !== senderID);
    if (otherCommands.length > 0) {
        response += "üîµ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô:\n";
        response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        otherCommands.slice(0, 3).forEach(([commandName, data], index) => {
            const remainingMs = data.expiresAt - Date.now();
            const remainingTime = formatRemainingTime(remainingMs);
            
            response += `${index + 1}. ${data.prompt.substring(0, 30)}${data.prompt.length > 30 ? '...' : ''}\n`;
            response += `   ‚îî üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${prefix}${commandName} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingTime})\n\n`;
        });
        
        if (otherCommands.length > 3) {
            response += `   ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${otherCommands.length - 3} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...\n\n`;
        }
    }
    
    response += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
    response += `üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡∏û‡∏¥‡∏°‡∏û‡πå ${prefix}<‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ\n`;
    response += `üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏ö <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>\n`;
    response += `üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥`;

    api.sendMessage(response, threadID, messageID);
}

async function handleDeleteCommand(api, event, commandNameToDelete) {
    const { threadID, messageID } = event;

    if (!commandNameToDelete) {
        return api.sendMessage(`‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${event.prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏ö mycommand`, threadID, messageID);
    }

    const commandData = commandState[commandNameToDelete];
    if (!commandData) {
        return api.sendMessage(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠ "${commandNameToDelete}"`, threadID, messageID);
    }

    try {
        deleteGeneratedCommand(commandNameToDelete);
        api.sendMessage(`‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "${commandNameToDelete}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`, threadID, messageID);
    } catch (error) {
        console.error(`Error deleting command ${commandNameToDelete}:`, error);
        api.sendMessage(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${error.message}`, threadID, messageID);
    }
}

async function showUserHistory(api, event, prefix) {
    const { threadID, messageID, senderID } = event;
    const userHistoryData = getUserHistory(senderID);

    if (!userHistoryData || userHistoryData.requests.length === 0) {
        return api.sendMessage("ü§ñ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏î‡πÜ ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô", threadID, messageID);
    }

    let response = "üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n" +
                  "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

    response += `üë§ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:\n`;
    response += `   ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${userHistoryData.totalCommands} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n`;
    response += `   ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date(userHistoryData.lastUsed).toLocaleString("th-TH")}\n\n`;

    response += "üìù ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n";
    response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

    userHistoryData.requests.forEach((request, index) => {
        const timeAgo = formatRemainingTime(Date.now() - request.timestamp);
        const isActive = commandState[request.commandName] ? "üü¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" : "üî¥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏";
        
        response += `${index + 1}. ${request.prompt}\n`;
        response += `   ‚îî üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${prefix}${request.commandName}\n`;
        response += `   ‚îî ‚è∞ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${timeAgo}‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß\n`;
        response += `   ‚îî üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${isActive}\n\n`;
    });

    response += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
    response += `üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: AI ‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô`;

    api.sendMessage(response, threadID, messageID);
}

// --- Main Command ---
module.exports = {
    name: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á",
    description: "‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏î‡∏à‡∏≥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏±‡∏ô - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£",
    version: "2.4.2",
    aliases: ["createcmd", "newcmd", "cmd", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"],
    nashPrefix: false,
    cooldowns: 60,

    async execute(api, event, args, prefix) {
        const { threadID, messageID, senderID } = event;
        const subCommand = args[0]?.toLowerCase();

        if (subCommand === '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' || subCommand === 'list') {
            return listGeneratedCommands(api, event, prefix);
        }

        if (subCommand === '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' || subCommand === 'history') {
            return showUserHistory(api, event, prefix);
        }

        if (subCommand === '‡∏•‡∏ö' || subCommand === 'delete') {
            const commandNameToDelete = args[1];
            return handleDeleteCommand(api, event, commandNameToDelete);
        }

        const userPrompt = args.join(" ").trim();

        if (!userPrompt) {
            const userHistoryData = getUserHistory(senderID);
            const hasHistory = userHistoryData && userHistoryData.requests.length > 0;
            
            let usageMessage = `ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞\n` +
                             `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

            if (hasHistory) {
                usageMessage += `üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ${userHistoryData.totalCommands} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n\n`;
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                const recentPrompt = userHistoryData.requests[0].prompt;
                usageMessage += `üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n"${recentPrompt}"\n\n`;
            } else {
                usageMessage += `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å!\n\n`;
            }

            usageMessage += `üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n\n` +
                          `1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà:\n   ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì>\n` +
                          `   üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-100\n\n` +
                          `2Ô∏è‚É£ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n   ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n` +
                          `3Ô∏è‚É£ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n   ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥\n\n` +
                          `4Ô∏è‚É£ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n   ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏ö <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>\n\n`;

            if (hasHistory) {
                usageMessage += `üß† AI ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏∂‡πâ‡∏ô!`;
            } else {
                usageMessage += `üí≠ ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"`;
            }

            return api.sendMessage(usageMessage, threadID, messageID);
        }

        let waitingMessage = null;
        try {
            waitingMessage = await api.sendMessage("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI...", threadID, messageID);
            await api.editMessage("üöÄ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì (Gemini Vision)...", waitingMessage.messageID);

            const fullApiPrompt = `
                ${generateSmartPrompt(userPrompt, senderID)}
                
                Format required - Create a Facebook Messenger bot command:
                module.exports = {
                    name: "commandname",
                    description: "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
                    version: "1.0.0",
                    aliases: ["alias1"],
                    nashPrefix: false,
                    cooldowns: 10,
                    async execute(api, event, args, prefix) {
                        const { threadID, messageID, senderID, mentions = [], body = "" } = event;
                        
                        // Ensure mentions is always an array
                        const mentionList = Array.isArray(mentions) ? mentions : [];
                        const mentionIds = Object.keys(mentionList);
                        
                        // Safe way to get message text
                        const messageText = body || "";
                        
                        // Your command logic here
                        api.sendMessage("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö", threadID, messageID);
                    }
                };
                
                IMPORTANT RULES:
                1. Always destructure event with default values
                2. Always check if mentions is array before using array methods
                3. Use mentionIds = Object.keys(mentions || {}) for mention IDs
                4. Always handle undefined/null values safely
                5. Use try-catch for any risky operations
                6. Return ONLY the JavaScript code, no explanations.
            `;
            
            // [MODIFIED] Using the Gemini Vision API endpoint
            const apiUrl = `${CONFIG.KAIZ_API_URL}?q=${encodeURIComponent(fullApiPrompt)}&uid=${senderID}&imageUrl=&apikey=${CONFIG.KAIZ_API_KEY}`;
            
            const response = await axios.get(apiUrl, { timeout: 60000 });
            const responseData = response.data;

            if (!responseData || !responseData.response) {
                console.error("[Gemini Vision Response Error] Unexpected format received:", JSON.stringify(responseData, null, 2));
                throw new Error(`API (Gemini Vision) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
            }

            let generatedCode = responseData.response;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏Ñ‡πâ‡∏î
            const isOnlyUrl = (generatedCode.includes("googleusercontent.com") && !generatedCode.includes("module.exports")) ||
                             (generatedCode.trim().startsWith("http") && !generatedCode.includes("module.exports"));
            
            if (isOnlyUrl) {
                console.error("[Gemini Vision Invalid Response] Got URL instead of code:", generatedCode);
                throw new Error("API ‡∏™‡πà‡∏á URL ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ");
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (generatedCode.length < 50 || !generatedCode.includes("execute")) {
                console.error("[Gemini Vision Short Response]", generatedCode);
                throw new Error("API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏Ç‡∏≠");
            }
            
            if (!generatedCode.includes("module.exports")) {
                 console.error("[Gemini Vision Invalid Code]", generatedCode);
                 throw new Error("AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢)");
            }

            const codeMatch = generatedCode.match(/```(?:javascript|js)?\s*([\s\S]+?)```/);
            if (codeMatch) {
                generatedCode = codeMatch[1].trim();
                console.log("‚úÖ Extracted code from markdown block");
            } else {
                generatedCode = generatedCode.trim();
                console.log("‚úÖ Using code as-is (no markdown block detected)");
            }

            // Validate ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏Ñ‡πâ‡∏î
            if (!generatedCode.includes("module.exports")) {
                console.error("[Code Validation Failed] No module.exports found in:", generatedCode.substring(0, 200));
                throw new Error("‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ module.exports");
            }

            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ mentions.includes ‡πÅ‡∏•‡∏∞ mentions ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            generatedCode = generatedCode.replace(
                /mentions\.includes\(/g, 
                '(Array.isArray(mentions) ? mentions : []).includes('
            );
            
            generatedCode = generatedCode.replace(
                /mentions\.length/g, 
                '(Array.isArray(mentions) ? mentions.length : 0)'
            );
            
            generatedCode = generatedCode.replace(
                /mentions\.map\(/g, 
                '(Array.isArray(mentions) ? mentions : []).map('
            );
            
            generatedCode = generatedCode.replace(
                /mentions\.filter\(/g, 
                '(Array.isArray(mentions) ? mentions : []).filter('
            );
            
            generatedCode = generatedCode.replace(
                /mentions\.forEach\(/g, 
                '(Array.isArray(mentions) ? mentions : []).forEach('
            );

            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Object.keys(mentions) ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            generatedCode = generatedCode.replace(
                /Object\.keys\(mentions\)/g, 
                'Object.keys(mentions || {})'
            );

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö event properties ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            if (!generatedCode.includes('const { threadID, messageID') && generatedCode.includes('threadID')) {
                generatedCode = generatedCode.replace(
                    /async execute\(api, event, args, prefix\) \{/,
                    `async execute(api, event, args, prefix) {
        const { threadID, messageID, senderID, mentions = [], body = "" } = event;`
                );
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° error handling wrapper ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô execute
            if (!generatedCode.includes('try {') && !generatedCode.includes('catch')) {
                generatedCode = generatedCode.replace(
                    /(async execute\(api, event, args, prefix\) \{[\s\S]*?)(api\.sendMessage[\s\S]*?)\s*\}/,
                    `$1try {
            $2
        } catch (error) {
            console.error('[Generated Command Error]:', error);
            api.sendMessage(\`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: \${error.message}\`, threadID, messageID);
        }
    }`
                );
            }

            const nameMatch = generatedCode.match(/name:\s*["']([^"']+)["']/);
            if (!nameMatch || !nameMatch[1]) {
                throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (name) ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ");
            }
            const commandName = nameMatch[1];
            const filename = `${commandName}.js`;
            const filePath = path.join(GENERATED_CMD_DIR, filename);

            if (commandState[commandName]) {
                deleteGeneratedCommand(commandName);
            }

            fs.writeFileSync(filePath, generatedCode);

            const expiresAt = Date.now() + CONFIG.COMMAND_EXPIRY_HOURS * 60 * 60 * 1000;
            commandState[commandName] = { filename, expiresAt, prompt: userPrompt, creatorId: senderID };
            fs.writeFileSync(STATE_FILE, JSON.stringify(commandState, null, 2));
            scheduleCommandExpiry(commandName, commandState[commandName]);

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            addToUserHistory(senderID, userPrompt, commandName);

            // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            console.log("üîÑ Attempting to reload generated commands...");
            if (typeof global.reloadGeneratedCommands === 'function') {
                const reloadedCount = global.reloadGeneratedCommands();
                console.log(`‚úÖ Reloaded ${reloadedCount} commands successfully`);
            } else {
                console.log("‚ö†Ô∏è global.reloadGeneratedCommands function not available");
            }

            const successMessage = `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! (v2.4.2 - ‡πÉ‡∏ä‡πâ Gemini Vision)\n\n` +
                                 `üéØ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${commandName}\n` +
                                 `üöÄ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢: ${prefix}${commandName}\n` +
                                 `‚è∞ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô ${CONFIG.COMMAND_EXPIRY_HOURS} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n` +
                                 `üõ°Ô∏è ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n\n` +
                                 `üß† AI ‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏∂‡πâ‡∏ô!\n\n` +
                                 `üí° ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢: ${prefix}‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
            await api.sendMessage(successMessage, threadID, messageID);

        } catch (e) {
            console.error(e);
            let errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ${e.message}`;
            
            // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            if (e.message.includes("URL ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î")) {
                errorMessage += `\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô:\n`;
                errorMessage += `‚Ä¢ "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"\n`;
                errorMessage += `‚Ä¢ "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-100"\n`;
                errorMessage += `‚Ä¢ "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"`;
            } else if (e.message.includes("API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤")) {
                errorMessage += `\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: API ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 1-2 ‡∏ô‡∏≤‡∏ó‡∏µ`;
            } else {
                errorMessage += `\n\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏π‡∏î‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"`;
            }
            
            await api.sendMessage(errorMessage, threadID, messageID);
        } finally {
            if (waitingMessage && waitingMessage.messageID) {
                api.unsendMessage(waitingMessage.messageID);
            }
        }
    }
};
