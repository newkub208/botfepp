const fs = require("fs");
const path = require("path");
const axios = require("axios");

// Path to AutoDL state file
const autoDLStateFile = path.join(__dirname, "autoDLState.json");

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå cache ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
const CACHE_DIR = path.join(__dirname, "../commands/cache");
if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
}

module.exports = {
    name: "autoMediaDL",
    version: "1.0.0",
    description: "Auto download TikTok, Facebook, and Instagram videos when enabled",
    author: "Kaizenji",
    async onEvent({ api, event }) {
        // Skip if it's a command (starts with /)
        if (event.body && event.body.startsWith("/")) return;
        
        // Skip if it's from bot itself
        if (event.senderID === api.getCurrentUserID()) return;
        
        // Skip if no message body
        if (!event.body) return;

        try {
            // Check if AutoDL is enabled for this thread
            if (!fs.existsSync(autoDLStateFile)) return;
            
            const autoDLState = JSON.parse(fs.readFileSync(autoDLStateFile, "utf8"));
            
            // Check if AutoDL is enabled globally and for this specific thread
            if (!autoDLState.enabled) return;
            
            // ‡∏ñ‡πâ‡∏≤ AutoDL ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ thread ID ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            if (!autoDLState.threads[event.threadID]) {
                autoDLState.threads[event.threadID] = true;
                fs.writeFileSync(autoDLStateFile, JSON.stringify(autoDLState, null, 2));
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå TikTok, Facebook ‡πÅ‡∏•‡∏∞ Instagram ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            const tiktokRegex = /(?:https?:\/\/)?(?:www\.)?(?:vm\.|vt\.)?tiktok\.com\/\S+/gi;
            const facebookRegex = /(?:https?:\/\/)?(?:www\.)?(?:m\.)?facebook\.com\/(?:share\/[rv]\/\S+|watch\/\?\S*|reel\/\S+|\S+\/videos\/\S+|\S+)|(?:https?:\/\/)?fb\.watch\/\S+/gi;
            const instagramRegex = /(?:https?:\/\/)?(?:www\.)?instagram\.com\/(?:p|reel|tv)\/\S+/gi;
            
            const tiktokLinks = event.body.match(tiktokRegex);
            const facebookLinks = event.body.match(facebookRegex);
            const instagramLinks = event.body.match(instagramRegex);
            const mediaLinks = [...(tiktokLinks || []), ...(facebookLinks || []), ...(instagramLinks || [])];

            if (!mediaLinks || mediaLinks.length === 0) return;

            // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
            const videoUrl = mediaLinks[0];
            console.log("üéØ Found video link:", videoUrl);
            
            const waitingMessage = await api.sendMessage("üì• ‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...", event.threadID);

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            const apiKey = "024875ee661a808c753b5e2f6a3eb908547691275d2015a884772153679618ef";
            const apiUrl = `https://haji-mix-api.gleeze.com/api/autodl?url=${encodeURIComponent(videoUrl)}&stream=true&api_key=${apiKey}`;
            
            // First, try to get JSON info (without stream=true)
            let videoInfo;
            let videoDownloadUrl;
            let videoTitle = "Video from social media";
            
            try {
                const infoUrl = `https://haji-mix-api.gleeze.com/api/autodl?url=${encodeURIComponent(videoUrl)}&api_key=${apiKey}`;
                const infoRes = await axios.get(infoUrl, { timeout: 30000 });
                
                if (infoRes.data && !infoRes.data.error && typeof infoRes.data === 'object') {
                    videoInfo = infoRes.data;
                    videoTitle = videoInfo.title || videoInfo.data?.title || "Video from social media";
                    
                    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ download URL ‡∏à‡∏≤‡∏Å JSON response
                    if (videoInfo.download_url) {
                        videoDownloadUrl = videoInfo.download_url;
                    } else if (videoInfo.url) {
                        videoDownloadUrl = videoInfo.url;
                    } else if (videoInfo.data && videoInfo.data.download_url) {
                        videoDownloadUrl = videoInfo.data.download_url;
                    } else if (videoInfo.data && videoInfo.data.url) {
                        videoDownloadUrl = videoInfo.data.url;
                    }
                }
            } catch (error) {
                // Silently fail and use direct download
            }
            
            // If no download URL from JSON, use direct stream URL
            if (!videoDownloadUrl) {
                videoDownloadUrl = apiUrl;
            }
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            const fileName = `auto_video_${Date.now()}.mp4`;
            const filePath = path.join(CACHE_DIR, fileName);
            const writer = fs.createWriteStream(filePath);

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            const videoStreamRes = await axios({
                url: videoDownloadUrl,
                method: 'GET',
                responseType: 'stream'
            });

            videoStreamRes.data.pipe(writer);

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            writer.on("finish", () => {
                api.sendMessage({
                    body: `‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìù: ${videoTitle}\nüîó: ${videoUrl}`,
                    attachment: fs.createReadStream(filePath)
                }, event.threadID, () => {
                    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cache ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    if (fs.existsSync(filePath)) {
                        fs.unlinkSync(filePath);
                    }
                });
                
                // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î..."
                api.unsendMessage(waitingMessage.messageID);
            });

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            writer.on("error", (err) => {
                console.error("‚ùå Error writing video file:", err);
                api.sendMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", event.threadID);
                if (fs.existsSync(filePath)) {
                    fs.unlinkSync(filePath);
                }
                // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î..."
                api.unsendMessage(waitingMessage.messageID);
            });

        } catch (error) {
            console.error("‚ùå Auto Video DL Error:", error.message);
            api.sendMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ${error.message}`, event.threadID);
        }
    }
};
