const fs = require('fs');
const path = require('path');

// --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
const BAN_FILE_PATH = path.join(__dirname, '../../ban_list.json'); // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô ---
function loadBannedUsers() {
    try {
        if (fs.existsSync(BAN_FILE_PATH)) {
            const data = fs.readFileSync(BAN_FILE_PATH, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Error loading ban list:', error);
    }
    return {};
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô ---
function saveBannedUsers(bannedUsers) {
    try {
        fs.writeFileSync(BAN_FILE_PATH, JSON.stringify(bannedUsers, null, 2));
    } catch (error) {
        console.error('Error saving ban list:', error);
    }
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
function isBanExpired(banInfo) {
    if (!banInfo.banUntil) return false; // ‡πÅ‡∏ö‡∏ô‡∏ñ‡∏≤‡∏ß‡∏£
    return Date.now() > banInfo.banUntil;
}

module.exports = {
    name: "banChecker",
    description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°",

    async handleEvent(api, event) {
        const { threadID, logMessageType, logMessageData } = event;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
        if (logMessageType !== "log:subscribe") return;

        try {
            const bannedUsers = loadBannedUsers();
            const addedUsers = logMessageData.addedParticipants || [];

            for (const user of addedUsers) {
                const userID = user.userFbId;
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (bannedUsers[userID]) {
                    const banInfo = bannedUsers[userID];
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if (isBanExpired(banInfo)) {
                        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                        delete bannedUsers[userID];
                        saveBannedUsers(bannedUsers);
                        console.log(`Ban expired for user ${userID}, removed from ban list`);
                        continue;
                    }

                    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    const userInfo = await api.getUserInfo(userID);
                    const userName = userInfo[userID]?.name || `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ UID: ${userID}`;

                    // ‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    try {
                        await api.removeUserFromGroup(userID, threadID);
                        
                        let timeLeft = "‡∏ñ‡∏≤‡∏ß‡∏£";
                        if (banInfo.banUntil) {
                            const timeLeftMs = banInfo.banUntil - Date.now();
                            const days = Math.floor(timeLeftMs / (1000 * 60 * 60 * 24));
                            const hours = Math.floor((timeLeftMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                            const minutes = Math.floor((timeLeftMs % (1000 * 60 * 60)) / (1000 * 60));
                            
                            if (days > 0) {
                                timeLeft = `${days} ‡∏ß‡∏±‡∏ô ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                            } else if (hours > 0) {
                                timeLeft = `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                            } else {
                                timeLeft = `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                            }
                        }

                        const kickMessage = `üö´ ‡πÄ‡∏ï‡∏∞ "${userName}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n` +
                            `üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${banInfo.reason}\n` +
                            `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${timeLeft}\n` +
                            `üìÖ ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(banInfo.bannedAt).toLocaleString('th-TH')}`;

                        api.sendMessage(kickMessage, threadID);
                        
                    } catch (error) {
                        console.error(`Error removing banned user ${userID}:`, error);
                        api.sendMessage(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞ "${userName}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ`, threadID);
                    }
                }
            }

        } catch (error) {
            console.error('Error in ban checker:', error);
        }
    }
};
