const fs = require('fs');
const path = require('path');

const LINK_PROTECTION_CONFIG_FILE = path.join(__dirname, 'linkProtectionState.json');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
function loadLinkProtectionConfig() {
    try {
        if (fs.existsSync(LINK_PROTECTION_CONFIG_FILE)) {
            const data = fs.readFileSync(LINK_PROTECTION_CONFIG_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Error loading link protection config:', error);
    }
    return {};
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡πâ‡∏á
function containsLink(text, customDomains = [], whitelist = []) {
    if (!text || typeof text !== 'string') return false;
    
    const message = text.toLowerCase();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö whitelist ‡∏Å‡πà‡∏≠‡∏ô - ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
    for (const allowedDomain of whitelist) {
        const allowPattern = new RegExp(allowedDomain.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i');
        if (allowPattern.test(message)) {
            return false; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
        }
    }
    
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡πâ‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const basicPatterns = [
        /https?:\/\/[^\s]+/i,           // http:// ‡∏´‡∏£‡∏∑‡∏≠ https://
        /www\.[^\s]+\.[a-z]{2,}/i,     // www.example.com
        /[a-z0-9-]+\.(com|net|org|co\.th|th|io|me|cc|tv|tk|ml|ga|cf)[^\s]*/i, // ‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        /facebook\.com[^\s]*/i,         // Facebook
        /fb\.com[^\s]*/i,              // FB short link
        /youtube\.com[^\s]*/i,         // YouTube
        /youtu\.be[^\s]*/i,            // YouTube short link
        /bit\.ly[^\s]*/i,              // Bitly
        /tinyurl\.com[^\s]*/i,         // TinyURL
        /t\.co[^\s]*/i,                // Twitter
        /instagram\.com[^\s]*/i,       // Instagram
        /tiktok\.com[^\s]*/i,          // TikTok
        /discord\.gg[^\s]*/i,          // Discord invite
        /telegram\.me[^\s]*/i,         // Telegram
        /line\.me[^\s]*/i              // Line
    ];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    for (const pattern of basicPatterns) {
        if (pattern.test(message)) {
            return true;
        }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
    for (const domain of customDomains) {
        const domainPattern = new RegExp(domain.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i');
        if (domainPattern.test(message)) {
            return true;
        }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö IP address
    const ipPattern = /\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]+\b/;
    if (ipPattern.test(message)) {
        return true;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡∏ó‡∏µ‡πà‡∏°‡∏µ @ ‡πÅ‡∏•‡∏∞ domain
    const emailPattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}/i;
    if (emailPattern.test(message)) {
        return true;
    }
    
    return false;
}

module.exports = {
    name: "linkProtectionFilter",
    version: "1.0.0",
    description: "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°",
    author: "NashBot",
    
    async onEvent({ api, event, prefix }) {
        // ‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó
        if (event.type !== 'message' || !event.body) return;
        
        const { threadID, senderID, body } = event;
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        const config = loadLinkProtectionConfig();
        const groupConfig = config[threadID];
        
        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
        if (!groupConfig || !groupConfig.enabled) return;
        
        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        try {
            const botConfig = require('../../config.json');
            if (senderID === botConfig.adminUID) return;
        } catch (error) {
            console.error('Error loading config for link protection:', error);
        }
        
        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡πÄ‡∏≠‡∏á
        if (senderID === api.getCurrentUserID()) return;
        
        // ‡πÄ‡∏ä‡πá‡∏Å‡∏•‡∏¥‡πâ‡∏á
        const customDomains = groupConfig.customDomains || [];
        const whitelist = groupConfig.whitelist || [];
        
        if (containsLink(body, customDomains, whitelist)) {
            try {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏∞
                const threadInfo = await api.getThreadInfo(threadID);
                if (threadInfo && threadInfo.participantIDs && threadInfo.participantIDs.includes(senderID)) {
                    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏¥‡πâ‡∏á
                    try {
                        await api.unsendMessage(event.messageID);
                    } catch (deleteError) {
                        console.log(`[LINK PROTECTION] Cannot delete message: ${deleteError.message}`);
                    }
                    
                    // ‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                    await api.removeUserFromGroup(senderID, threadID);
                    console.log(`[LINK PROTECTION] Removed user ${senderID} from group ${threadID} for sending link`);
                    
                    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                    const userInfo = await api.getUserInfo(senderID);
                    const userName = userInfo[senderID]?.name || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
                    
                    const warningMessage = `üõ°Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á\n\n` +
                        `üë§ ${userName} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á\n\n` +
                        `‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡πâ‡∏≤‡∏°!`;
                    
                    setTimeout(() => {
                        api.sendMessage(warningMessage, threadID);
                    }, 1000);
                    
                } else {
                    console.log(`[LINK PROTECTION] User ${senderID} is not in group ${threadID}, skipping removal`);
                }
            } catch (error) {
                console.error('Error removing user for sending link:', error);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (error.payload && error.payload.includes('not a participant')) {
                    console.log(`[LINK PROTECTION] User ${senderID} is no longer in group ${threadID}`);
                } else {
                    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ï‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πá‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    try {
                        await api.unsendMessage(event.messageID);
                        
                        const warningMessage = `üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏•‡∏¥‡πâ‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°!\n\n` +
                            `‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡πâ‡∏≤‡∏°\n` +
                            `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß`;
                        
                        api.sendMessage(warningMessage, threadID);
                    } catch (deleteError) {
                        console.error('Cannot delete message with link:', deleteError);
                    }
                }
            }
        }
    }
};
